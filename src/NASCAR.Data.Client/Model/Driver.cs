/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// Driver
    /// </summary>
    [DataContract]
        public partial class Driver :  IEquatable<Driver>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Driver" /> class.
        /// </summary>
        /// <param name="id">Id.</param>
        /// <param name="name">Name.</param>
        /// <param name="dateOfBirth">Date of birth.</param>
        /// <param name="dateOfDeath">Date of death.</param>
        /// <param name="hometownCity">The driver&#x27;s hometown.</param>
        /// <param name="hometownState">The driver&#x27;s home state.</param>
        /// <param name="hometownCountry">The driver&#x27;s home country.</param>
        /// <param name="residesCity">The city where the driver resides.</param>
        /// <param name="residesState">The state where the driver resides.</param>
        /// <param name="residesCountry">The country where the driver resides.</param>
        /// <param name="series1RookieYear">The driver&#x27;s rookie year in series 1.</param>
        /// <param name="series2RookieYear">The driver&#x27;s rookie year in series 2.</param>
        /// <param name="series3RookieYear">The driver&#x27;s rookie year in series 3.</param>
        /// <param name="hobbies">The driver&#x27;s hobbies.</param>
        public Driver(int? id = default(int?), string name = default(string), DateTimeOffset? dateOfBirth = default(DateTimeOffset?), DateTimeOffset? dateOfDeath = default(DateTimeOffset?), string hometownCity = default(string), string hometownState = default(string), string hometownCountry = default(string), string residesCity = default(string), string residesState = default(string), string residesCountry = default(string), int? series1RookieYear = default(int?), int? series2RookieYear = default(int?), int? series3RookieYear = default(int?), string hobbies = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.DateOfBirth = dateOfBirth;
            this.DateOfDeath = dateOfDeath;
            this.HometownCity = hometownCity;
            this.HometownState = hometownState;
            this.HometownCountry = hometownCountry;
            this.ResidesCity = residesCity;
            this.ResidesState = residesState;
            this.ResidesCountry = residesCountry;
            this.Series1RookieYear = series1RookieYear;
            this.Series2RookieYear = series2RookieYear;
            this.Series3RookieYear = series3RookieYear;
            this.Hobbies = hobbies;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        /// <value>Date of birth</value>
        [DataMember(Name="date_of_birth", EmitDefaultValue=false)]
        public DateTimeOffset? DateOfBirth { get; set; }

        /// <summary>
        /// Date of death
        /// </summary>
        /// <value>Date of death</value>
        [DataMember(Name="date_of_death", EmitDefaultValue=false)]
        public DateTimeOffset? DateOfDeath { get; set; }

        /// <summary>
        /// The driver&#x27;s hometown
        /// </summary>
        /// <value>The driver&#x27;s hometown</value>
        [DataMember(Name="hometown_city", EmitDefaultValue=false)]
        public string HometownCity { get; set; }

        /// <summary>
        /// The driver&#x27;s home state
        /// </summary>
        /// <value>The driver&#x27;s home state</value>
        [DataMember(Name="hometown_state", EmitDefaultValue=false)]
        public string HometownState { get; set; }

        /// <summary>
        /// The driver&#x27;s home country
        /// </summary>
        /// <value>The driver&#x27;s home country</value>
        [DataMember(Name="hometown_country", EmitDefaultValue=false)]
        public string HometownCountry { get; set; }

        /// <summary>
        /// The city where the driver resides
        /// </summary>
        /// <value>The city where the driver resides</value>
        [DataMember(Name="resides_city", EmitDefaultValue=false)]
        public string ResidesCity { get; set; }

        /// <summary>
        /// The state where the driver resides
        /// </summary>
        /// <value>The state where the driver resides</value>
        [DataMember(Name="resides_state", EmitDefaultValue=false)]
        public string ResidesState { get; set; }

        /// <summary>
        /// The country where the driver resides
        /// </summary>
        /// <value>The country where the driver resides</value>
        [DataMember(Name="resides_country", EmitDefaultValue=false)]
        public string ResidesCountry { get; set; }

        /// <summary>
        /// The driver&#x27;s rookie year in series 1
        /// </summary>
        /// <value>The driver&#x27;s rookie year in series 1</value>
        [DataMember(Name="series_1_rookie_year", EmitDefaultValue=false)]
        public int? Series1RookieYear { get; set; }

        /// <summary>
        /// The driver&#x27;s rookie year in series 2
        /// </summary>
        /// <value>The driver&#x27;s rookie year in series 2</value>
        [DataMember(Name="series_2_rookie_year", EmitDefaultValue=false)]
        public int? Series2RookieYear { get; set; }

        /// <summary>
        /// The driver&#x27;s rookie year in series 3
        /// </summary>
        /// <value>The driver&#x27;s rookie year in series 3</value>
        [DataMember(Name="series_3_rookie_year", EmitDefaultValue=false)]
        public int? Series3RookieYear { get; set; }

        /// <summary>
        /// The driver&#x27;s hobbies
        /// </summary>
        /// <value>The driver&#x27;s hobbies</value>
        [DataMember(Name="hobbies", EmitDefaultValue=false)]
        public string Hobbies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Driver {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DateOfDeath: ").Append(DateOfDeath).Append("\n");
            sb.Append("  HometownCity: ").Append(HometownCity).Append("\n");
            sb.Append("  HometownState: ").Append(HometownState).Append("\n");
            sb.Append("  HometownCountry: ").Append(HometownCountry).Append("\n");
            sb.Append("  ResidesCity: ").Append(ResidesCity).Append("\n");
            sb.Append("  ResidesState: ").Append(ResidesState).Append("\n");
            sb.Append("  ResidesCountry: ").Append(ResidesCountry).Append("\n");
            sb.Append("  Series1RookieYear: ").Append(Series1RookieYear).Append("\n");
            sb.Append("  Series2RookieYear: ").Append(Series2RookieYear).Append("\n");
            sb.Append("  Series3RookieYear: ").Append(Series3RookieYear).Append("\n");
            sb.Append("  Hobbies: ").Append(Hobbies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Driver);
        }

        /// <summary>
        /// Returns true if Driver instances are equal
        /// </summary>
        /// <param name="input">Instance of Driver to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Driver input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.DateOfDeath == input.DateOfDeath ||
                    (this.DateOfDeath != null &&
                    this.DateOfDeath.Equals(input.DateOfDeath))
                ) && 
                (
                    this.HometownCity == input.HometownCity ||
                    (this.HometownCity != null &&
                    this.HometownCity.Equals(input.HometownCity))
                ) && 
                (
                    this.HometownState == input.HometownState ||
                    (this.HometownState != null &&
                    this.HometownState.Equals(input.HometownState))
                ) && 
                (
                    this.HometownCountry == input.HometownCountry ||
                    (this.HometownCountry != null &&
                    this.HometownCountry.Equals(input.HometownCountry))
                ) && 
                (
                    this.ResidesCity == input.ResidesCity ||
                    (this.ResidesCity != null &&
                    this.ResidesCity.Equals(input.ResidesCity))
                ) && 
                (
                    this.ResidesState == input.ResidesState ||
                    (this.ResidesState != null &&
                    this.ResidesState.Equals(input.ResidesState))
                ) && 
                (
                    this.ResidesCountry == input.ResidesCountry ||
                    (this.ResidesCountry != null &&
                    this.ResidesCountry.Equals(input.ResidesCountry))
                ) && 
                (
                    this.Series1RookieYear == input.Series1RookieYear ||
                    (this.Series1RookieYear != null &&
                    this.Series1RookieYear.Equals(input.Series1RookieYear))
                ) && 
                (
                    this.Series2RookieYear == input.Series2RookieYear ||
                    (this.Series2RookieYear != null &&
                    this.Series2RookieYear.Equals(input.Series2RookieYear))
                ) && 
                (
                    this.Series3RookieYear == input.Series3RookieYear ||
                    (this.Series3RookieYear != null &&
                    this.Series3RookieYear.Equals(input.Series3RookieYear))
                ) && 
                (
                    this.Hobbies == input.Hobbies ||
                    (this.Hobbies != null &&
                    this.Hobbies.Equals(input.Hobbies))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.DateOfDeath != null)
                    hashCode = hashCode * 59 + this.DateOfDeath.GetHashCode();
                if (this.HometownCity != null)
                    hashCode = hashCode * 59 + this.HometownCity.GetHashCode();
                if (this.HometownState != null)
                    hashCode = hashCode * 59 + this.HometownState.GetHashCode();
                if (this.HometownCountry != null)
                    hashCode = hashCode * 59 + this.HometownCountry.GetHashCode();
                if (this.ResidesCity != null)
                    hashCode = hashCode * 59 + this.ResidesCity.GetHashCode();
                if (this.ResidesState != null)
                    hashCode = hashCode * 59 + this.ResidesState.GetHashCode();
                if (this.ResidesCountry != null)
                    hashCode = hashCode * 59 + this.ResidesCountry.GetHashCode();
                if (this.Series1RookieYear != null)
                    hashCode = hashCode * 59 + this.Series1RookieYear.GetHashCode();
                if (this.Series2RookieYear != null)
                    hashCode = hashCode * 59 + this.Series2RookieYear.GetHashCode();
                if (this.Series3RookieYear != null)
                    hashCode = hashCode * 59 + this.Series3RookieYear.GetHashCode();
                if (this.Hobbies != null)
                    hashCode = hashCode * 59 + this.Hobbies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
