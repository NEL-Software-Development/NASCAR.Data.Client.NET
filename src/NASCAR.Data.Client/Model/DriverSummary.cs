/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// DriverSummary
    /// </summary>
    [DataContract]
        public partial class DriverSummary :  IEquatable<DriverSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DriverSummary" /> class.
        /// </summary>
        /// <param name="driver">driver.</param>
        /// <param name="summaryByPrincipalRaceIDs">Principal race summaries.</param>
        /// <param name="summaryBySeason">summaryBySeason.</param>
        /// <param name="summaryByTracks">Track summaries.</param>
        /// <param name="summaryByTrackTypes">Track type summaries.</param>
        public DriverSummary(Driver driver = default(Driver), Collection<DriverSummaryByPrincipalRaceID> summaryByPrincipalRaceIDs = default(Collection<DriverSummaryByPrincipalRaceID>), DriverSummaryBySeason summaryBySeason = default(DriverSummaryBySeason), Collection<DriverSummaryByTrack> summaryByTracks = default(Collection<DriverSummaryByTrack>), Collection<DriverSummaryByTrackType> summaryByTrackTypes = default(Collection<DriverSummaryByTrackType>))
        {
            this.Driver = driver;
            this.SummaryByPrincipalRaceIDs = summaryByPrincipalRaceIDs;
            this.SummaryBySeason = summaryBySeason;
            this.SummaryByTracks = summaryByTracks;
            this.SummaryByTrackTypes = summaryByTrackTypes;
        }
        
        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        [DataMember(Name="Driver", EmitDefaultValue=false)]
        public Driver Driver { get; set; }

        /// <summary>
        /// Principal race summaries
        /// </summary>
        /// <value>Principal race summaries</value>
        [DataMember(Name="Summary_ByPrincipalRaceIDs", EmitDefaultValue=false)]
        public Collection<DriverSummaryByPrincipalRaceID> SummaryByPrincipalRaceIDs { get; set; }

        /// <summary>
        /// Gets or Sets SummaryBySeason
        /// </summary>
        [DataMember(Name="Summary_BySeason", EmitDefaultValue=false)]
        public DriverSummaryBySeason SummaryBySeason { get; set; }

        /// <summary>
        /// Track summaries
        /// </summary>
        /// <value>Track summaries</value>
        [DataMember(Name="Summary_ByTracks", EmitDefaultValue=false)]
        public Collection<DriverSummaryByTrack> SummaryByTracks { get; set; }

        /// <summary>
        /// Track type summaries
        /// </summary>
        /// <value>Track type summaries</value>
        [DataMember(Name="Summary_ByTrackTypes", EmitDefaultValue=false)]
        public Collection<DriverSummaryByTrackType> SummaryByTrackTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DriverSummary {\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  SummaryByPrincipalRaceIDs: ").Append(SummaryByPrincipalRaceIDs).Append("\n");
            sb.Append("  SummaryBySeason: ").Append(SummaryBySeason).Append("\n");
            sb.Append("  SummaryByTracks: ").Append(SummaryByTracks).Append("\n");
            sb.Append("  SummaryByTrackTypes: ").Append(SummaryByTrackTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DriverSummary);
        }

        /// <summary>
        /// Returns true if DriverSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of DriverSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DriverSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Driver == input.Driver ||
                    (this.Driver != null &&
                    this.Driver.Equals(input.Driver))
                ) && 
                (
                    this.SummaryByPrincipalRaceIDs == input.SummaryByPrincipalRaceIDs ||
                    this.SummaryByPrincipalRaceIDs != null &&
                    input.SummaryByPrincipalRaceIDs != null &&
                    this.SummaryByPrincipalRaceIDs.SequenceEqual(input.SummaryByPrincipalRaceIDs)
                ) && 
                (
                    this.SummaryBySeason == input.SummaryBySeason ||
                    (this.SummaryBySeason != null &&
                    this.SummaryBySeason.Equals(input.SummaryBySeason))
                ) && 
                (
                    this.SummaryByTracks == input.SummaryByTracks ||
                    this.SummaryByTracks != null &&
                    input.SummaryByTracks != null &&
                    this.SummaryByTracks.SequenceEqual(input.SummaryByTracks)
                ) && 
                (
                    this.SummaryByTrackTypes == input.SummaryByTrackTypes ||
                    this.SummaryByTrackTypes != null &&
                    input.SummaryByTrackTypes != null &&
                    this.SummaryByTrackTypes.SequenceEqual(input.SummaryByTrackTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Driver != null)
                    hashCode = hashCode * 59 + this.Driver.GetHashCode();
                if (this.SummaryByPrincipalRaceIDs != null)
                    hashCode = hashCode * 59 + this.SummaryByPrincipalRaceIDs.GetHashCode();
                if (this.SummaryBySeason != null)
                    hashCode = hashCode * 59 + this.SummaryBySeason.GetHashCode();
                if (this.SummaryByTracks != null)
                    hashCode = hashCode * 59 + this.SummaryByTracks.GetHashCode();
                if (this.SummaryByTrackTypes != null)
                    hashCode = hashCode * 59 + this.SummaryByTrackTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
