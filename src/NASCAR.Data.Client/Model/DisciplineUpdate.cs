/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// DisciplineUpdate
    /// </summary>
    [DataContract]
        public partial class DisciplineUpdate :  IEquatable<DisciplineUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DisciplineUpdate" /> class.
        /// </summary>
        /// <param name="inspectionType">inspectionType.</param>
        /// <param name="discipline">discipline.</param>
        /// <param name="vehicleNumber">vehicleNumber.</param>
        /// <param name="chassis">chassis.</param>
        public DisciplineUpdate(string inspectionType = default(string), string discipline = default(string), string vehicleNumber = default(string), string chassis = default(string))
        {
            this.InspectionType = inspectionType;
            this.Discipline = discipline;
            this.VehicleNumber = vehicleNumber;
            this.Chassis = chassis;
        }
        
        /// <summary>
        /// Gets or Sets InspectionType
        /// </summary>
        [DataMember(Name="inspection_type", EmitDefaultValue=false)]
        public string InspectionType { get; set; }

        /// <summary>
        /// Gets or Sets Discipline
        /// </summary>
        [DataMember(Name="discipline", EmitDefaultValue=false)]
        public string Discipline { get; set; }

        /// <summary>
        /// Gets or Sets VehicleNumber
        /// </summary>
        [DataMember(Name="vehicle_number", EmitDefaultValue=false)]
        public string VehicleNumber { get; set; }

        /// <summary>
        /// Gets or Sets Chassis
        /// </summary>
        [DataMember(Name="chassis", EmitDefaultValue=false)]
        public string Chassis { get; set; }

        /// <summary>
        /// Gets or Sets InspectionTime
        /// </summary>
        [DataMember(Name="inspection_time", EmitDefaultValue=false)]
        public DateTimeOffset? InspectionTime { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisciplineUpdate {\n");
            sb.Append("  InspectionType: ").Append(InspectionType).Append("\n");
            sb.Append("  Discipline: ").Append(Discipline).Append("\n");
            sb.Append("  VehicleNumber: ").Append(VehicleNumber).Append("\n");
            sb.Append("  Chassis: ").Append(Chassis).Append("\n");
            sb.Append("  InspectionTime: ").Append(InspectionTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisciplineUpdate);
        }

        /// <summary>
        /// Returns true if DisciplineUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of DisciplineUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisciplineUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InspectionType == input.InspectionType ||
                    (this.InspectionType != null &&
                    this.InspectionType.Equals(input.InspectionType))
                ) && 
                (
                    this.Discipline == input.Discipline ||
                    (this.Discipline != null &&
                    this.Discipline.Equals(input.Discipline))
                ) && 
                (
                    this.VehicleNumber == input.VehicleNumber ||
                    (this.VehicleNumber != null &&
                    this.VehicleNumber.Equals(input.VehicleNumber))
                ) && 
                (
                    this.Chassis == input.Chassis ||
                    (this.Chassis != null &&
                    this.Chassis.Equals(input.Chassis))
                ) && 
                (
                    this.InspectionTime == input.InspectionTime ||
                    (this.InspectionTime != null &&
                    this.InspectionTime.Equals(input.InspectionTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InspectionType != null)
                    hashCode = hashCode * 59 + this.InspectionType.GetHashCode();
                if (this.Discipline != null)
                    hashCode = hashCode * 59 + this.Discipline.GetHashCode();
                if (this.VehicleNumber != null)
                    hashCode = hashCode * 59 + this.VehicleNumber.GetHashCode();
                if (this.Chassis != null)
                    hashCode = hashCode * 59 + this.Chassis.GetHashCode();
                if (this.InspectionTime != null)
                    hashCode = hashCode * 59 + this.InspectionTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
