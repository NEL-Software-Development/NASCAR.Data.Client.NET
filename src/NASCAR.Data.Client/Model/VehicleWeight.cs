/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// VehicleWeight
    /// </summary>
    [DataContract]
        public partial class VehicleWeight :  IEquatable<VehicleWeight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleWeight" /> class.
        /// </summary>
        /// <param name="inspectionType">The type of inspection.</param>
        /// <param name="vehicleNumber">The vehicle number inspected.</param>
        /// <param name="adjustment">The weight adjustment.</param>
        /// <param name="crossWeight">The cross weight of the vehicle.</param>
        /// <param name="leftFront">The left front weight of the vehicle.</param>
        /// <param name="leftRear">The left rear weight of the vehicle.</param>
        /// <param name="leftSide">The weight of the left side of the vehicle.</param>
        /// <param name="nose">The nose weight of the vehicle.</param>
        /// <param name="rear">The rear weight of the vehicle.</param>
        /// <param name="rightFront">The right front weight of the vehicle.</param>
        /// <param name="rightRear">The right rear weight of the vehicle.</param>
        /// <param name="rightSide">The weight of the right side of the vehicle.</param>
        /// <param name="totalWeight">The total weight of the vehicle.</param>
        /// <param name="passed">Whether or not is passed.</param>
        public VehicleWeight(string inspectionType = default(string), string vehicleNumber = default(string), int? adjustment = default(int?), int? crossWeight = default(int?), int? leftFront = default(int?), int? leftRear = default(int?), int? leftSide = default(int?), int? nose = default(int?), int? rear = default(int?), int? rightFront = default(int?), int? rightRear = default(int?), int? rightSide = default(int?), int? totalWeight = default(int?), bool? passed = default(bool?))
        {
            this.InspectionType = inspectionType;
            this.VehicleNumber = vehicleNumber;
            this.Adjustment = adjustment;
            this.CrossWeight = crossWeight;
            this.LeftFront = leftFront;
            this.LeftRear = leftRear;
            this.LeftSide = leftSide;
            this.Nose = nose;
            this.Rear = rear;
            this.RightFront = rightFront;
            this.RightRear = rightRear;
            this.RightSide = rightSide;
            this.TotalWeight = totalWeight;
            this.Passed = passed;
        }
        
        /// <summary>
        /// The type of inspection
        /// </summary>
        /// <value>The type of inspection</value>
        [DataMember(Name="inspection_type", EmitDefaultValue=false)]
        public string InspectionType { get; set; }

        /// <summary>
        /// The vehicle number inspected
        /// </summary>
        /// <value>The vehicle number inspected</value>
        [DataMember(Name="vehicle_number", EmitDefaultValue=false)]
        public string VehicleNumber { get; set; }

        /// <summary>
        /// The weight adjustment
        /// </summary>
        /// <value>The weight adjustment</value>
        [DataMember(Name="adjustment", EmitDefaultValue=false)]
        public int? Adjustment { get; set; }

        /// <summary>
        /// The cross weight of the vehicle
        /// </summary>
        /// <value>The cross weight of the vehicle</value>
        [DataMember(Name="cross_weight", EmitDefaultValue=false)]
        public int? CrossWeight { get; set; }

        /// <summary>
        /// The left front weight of the vehicle
        /// </summary>
        /// <value>The left front weight of the vehicle</value>
        [DataMember(Name="left_front", EmitDefaultValue=false)]
        public int? LeftFront { get; set; }

        /// <summary>
        /// The left rear weight of the vehicle
        /// </summary>
        /// <value>The left rear weight of the vehicle</value>
        [DataMember(Name="left_rear", EmitDefaultValue=false)]
        public int? LeftRear { get; set; }

        /// <summary>
        /// The weight of the left side of the vehicle
        /// </summary>
        /// <value>The weight of the left side of the vehicle</value>
        [DataMember(Name="left_side", EmitDefaultValue=false)]
        public int? LeftSide { get; set; }

        /// <summary>
        /// The nose weight of the vehicle
        /// </summary>
        /// <value>The nose weight of the vehicle</value>
        [DataMember(Name="nose", EmitDefaultValue=false)]
        public int? Nose { get; set; }

        /// <summary>
        /// The rear weight of the vehicle
        /// </summary>
        /// <value>The rear weight of the vehicle</value>
        [DataMember(Name="rear", EmitDefaultValue=false)]
        public int? Rear { get; set; }

        /// <summary>
        /// The right front weight of the vehicle
        /// </summary>
        /// <value>The right front weight of the vehicle</value>
        [DataMember(Name="right_front", EmitDefaultValue=false)]
        public int? RightFront { get; set; }

        /// <summary>
        /// The right rear weight of the vehicle
        /// </summary>
        /// <value>The right rear weight of the vehicle</value>
        [DataMember(Name="right_rear", EmitDefaultValue=false)]
        public int? RightRear { get; set; }

        /// <summary>
        /// The weight of the right side of the vehicle
        /// </summary>
        /// <value>The weight of the right side of the vehicle</value>
        [DataMember(Name="right_side", EmitDefaultValue=false)]
        public int? RightSide { get; set; }

        /// <summary>
        /// The total weight of the vehicle
        /// </summary>
        /// <value>The total weight of the vehicle</value>
        [DataMember(Name="total_weight", EmitDefaultValue=false)]
        public int? TotalWeight { get; set; }

        /// <summary>
        /// Whether or not is passed
        /// </summary>
        /// <value>Whether or not is passed</value>
        [DataMember(Name="passed", EmitDefaultValue=false)]
        public bool? Passed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehicleWeight {\n");
            sb.Append("  InspectionType: ").Append(InspectionType).Append("\n");
            sb.Append("  VehicleNumber: ").Append(VehicleNumber).Append("\n");
            sb.Append("  Adjustment: ").Append(Adjustment).Append("\n");
            sb.Append("  CrossWeight: ").Append(CrossWeight).Append("\n");
            sb.Append("  LeftFront: ").Append(LeftFront).Append("\n");
            sb.Append("  LeftRear: ").Append(LeftRear).Append("\n");
            sb.Append("  LeftSide: ").Append(LeftSide).Append("\n");
            sb.Append("  Nose: ").Append(Nose).Append("\n");
            sb.Append("  Rear: ").Append(Rear).Append("\n");
            sb.Append("  RightFront: ").Append(RightFront).Append("\n");
            sb.Append("  RightRear: ").Append(RightRear).Append("\n");
            sb.Append("  RightSide: ").Append(RightSide).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleWeight);
        }

        /// <summary>
        /// Returns true if VehicleWeight instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleWeight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleWeight input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InspectionType == input.InspectionType ||
                    (this.InspectionType != null &&
                    this.InspectionType.Equals(input.InspectionType))
                ) && 
                (
                    this.VehicleNumber == input.VehicleNumber ||
                    (this.VehicleNumber != null &&
                    this.VehicleNumber.Equals(input.VehicleNumber))
                ) && 
                (
                    this.Adjustment == input.Adjustment ||
                    (this.Adjustment != null &&
                    this.Adjustment.Equals(input.Adjustment))
                ) && 
                (
                    this.CrossWeight == input.CrossWeight ||
                    (this.CrossWeight != null &&
                    this.CrossWeight.Equals(input.CrossWeight))
                ) && 
                (
                    this.LeftFront == input.LeftFront ||
                    (this.LeftFront != null &&
                    this.LeftFront.Equals(input.LeftFront))
                ) && 
                (
                    this.LeftRear == input.LeftRear ||
                    (this.LeftRear != null &&
                    this.LeftRear.Equals(input.LeftRear))
                ) && 
                (
                    this.LeftSide == input.LeftSide ||
                    (this.LeftSide != null &&
                    this.LeftSide.Equals(input.LeftSide))
                ) && 
                (
                    this.Nose == input.Nose ||
                    (this.Nose != null &&
                    this.Nose.Equals(input.Nose))
                ) && 
                (
                    this.Rear == input.Rear ||
                    (this.Rear != null &&
                    this.Rear.Equals(input.Rear))
                ) && 
                (
                    this.RightFront == input.RightFront ||
                    (this.RightFront != null &&
                    this.RightFront.Equals(input.RightFront))
                ) && 
                (
                    this.RightRear == input.RightRear ||
                    (this.RightRear != null &&
                    this.RightRear.Equals(input.RightRear))
                ) && 
                (
                    this.RightSide == input.RightSide ||
                    (this.RightSide != null &&
                    this.RightSide.Equals(input.RightSide))
                ) && 
                (
                    this.TotalWeight == input.TotalWeight ||
                    (this.TotalWeight != null &&
                    this.TotalWeight.Equals(input.TotalWeight))
                ) && 
                (
                    this.Passed == input.Passed ||
                    (this.Passed != null &&
                    this.Passed.Equals(input.Passed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InspectionType != null)
                    hashCode = hashCode * 59 + this.InspectionType.GetHashCode();
                if (this.VehicleNumber != null)
                    hashCode = hashCode * 59 + this.VehicleNumber.GetHashCode();
                if (this.Adjustment != null)
                    hashCode = hashCode * 59 + this.Adjustment.GetHashCode();
                if (this.CrossWeight != null)
                    hashCode = hashCode * 59 + this.CrossWeight.GetHashCode();
                if (this.LeftFront != null)
                    hashCode = hashCode * 59 + this.LeftFront.GetHashCode();
                if (this.LeftRear != null)
                    hashCode = hashCode * 59 + this.LeftRear.GetHashCode();
                if (this.LeftSide != null)
                    hashCode = hashCode * 59 + this.LeftSide.GetHashCode();
                if (this.Nose != null)
                    hashCode = hashCode * 59 + this.Nose.GetHashCode();
                if (this.Rear != null)
                    hashCode = hashCode * 59 + this.Rear.GetHashCode();
                if (this.RightFront != null)
                    hashCode = hashCode * 59 + this.RightFront.GetHashCode();
                if (this.RightRear != null)
                    hashCode = hashCode * 59 + this.RightRear.GetHashCode();
                if (this.RightSide != null)
                    hashCode = hashCode * 59 + this.RightSide.GetHashCode();
                if (this.TotalWeight != null)
                    hashCode = hashCode * 59 + this.TotalWeight.GetHashCode();
                if (this.Passed != null)
                    hashCode = hashCode * 59 + this.Passed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
