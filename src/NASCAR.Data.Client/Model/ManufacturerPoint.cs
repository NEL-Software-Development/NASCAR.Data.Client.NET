/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// ManufacturerPoint
    /// </summary>
    [DataContract]
        public partial class ManufacturerPoint :  IEquatable<ManufacturerPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManufacturerPoint" /> class.
        /// </summary>
        /// <param name="position">Points position.</param>
        /// <param name="manufacturer">Manufacturer name.</param>
        /// <param name="points">Number of points earned.</param>
        /// <param name="wins">Total wins in season.</param>
        /// <param name="bestFinish">Best finish date.</param>
        public ManufacturerPoint(int? position = default(int?), string manufacturer = default(string), int? points = default(int?), int? wins = default(int?), DateTimeOffset? bestFinish = default(DateTimeOffset?))
        {
            this.Position = position;
            this.Manufacturer = manufacturer;
            this.Points = points;
            this.Wins = wins;
            this.BestFinish = bestFinish;
        }
        
        /// <summary>
        /// Points position
        /// </summary>
        /// <value>Points position</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Manufacturer name
        /// </summary>
        /// <value>Manufacturer name</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Number of points earned
        /// </summary>
        /// <value>Number of points earned</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public int? Points { get; set; }

        /// <summary>
        /// Total wins in season
        /// </summary>
        /// <value>Total wins in season</value>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public int? Wins { get; set; }

        /// <summary>
        /// Best finish date
        /// </summary>
        /// <value>Best finish date</value>
        [DataMember(Name="best_finish", EmitDefaultValue=false)]
        public DateTimeOffset? BestFinish { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManufacturerPoint {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  BestFinish: ").Append(BestFinish).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManufacturerPoint);
        }

        /// <summary>
        /// Returns true if ManufacturerPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of ManufacturerPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManufacturerPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.Wins == input.Wins ||
                    (this.Wins != null &&
                    this.Wins.Equals(input.Wins))
                ) && 
                (
                    this.BestFinish == input.BestFinish ||
                    (this.BestFinish != null &&
                    this.BestFinish.Equals(input.BestFinish))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.Wins != null)
                    hashCode = hashCode * 59 + this.Wins.GetHashCode();
                if (this.BestFinish != null)
                    hashCode = hashCode * 59 + this.BestFinish.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
