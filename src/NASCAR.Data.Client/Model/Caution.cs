/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// Caution
    /// </summary>
    [DataContract]
        public partial class Caution :  IEquatable<Caution>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Caution" /> class.
        /// </summary>
        /// <param name="lapStart">lapStart.</param>
        /// <param name="lapEnd">lapEnd.</param>
        /// <param name="beneficiary">beneficiary.</param>
        /// <param name="comment">comment.</param>
        /// <param name="reason">reason.</param>
        /// <param name="flagTime">flagTime.</param>
        public Caution(int? lapStart = default(int?), int? lapEnd = default(int?), string beneficiary = default(string), string comment = default(string), string reason = default(string), DateTimeOffset? flagTime = default(DateTimeOffset?))
        {
            this.LapStart = lapStart;
            this.LapEnd = lapEnd;
            this.Beneficiary = beneficiary;
            this.Comment = comment;
            this.Reason = reason;
            this.FlagTime = flagTime;
        }
        
        /// <summary>
        /// Gets or Sets LapStart
        /// </summary>
        [DataMember(Name="lap_start", EmitDefaultValue=false)]
        public int? LapStart { get; set; }

        /// <summary>
        /// Gets or Sets LapEnd
        /// </summary>
        [DataMember(Name="lap_end", EmitDefaultValue=false)]
        public int? LapEnd { get; set; }

        /// <summary>
        /// Gets or Sets Beneficiary
        /// </summary>
        [DataMember(Name="beneficiary", EmitDefaultValue=false)]
        public string Beneficiary { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets FlagTime
        /// </summary>
        [DataMember(Name="flag_time", EmitDefaultValue=false)]
        public DateTimeOffset? FlagTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Caution {\n");
            sb.Append("  LapStart: ").Append(LapStart).Append("\n");
            sb.Append("  LapEnd: ").Append(LapEnd).Append("\n");
            sb.Append("  Beneficiary: ").Append(Beneficiary).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  FlagTime: ").Append(FlagTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Caution);
        }

        /// <summary>
        /// Returns true if Caution instances are equal
        /// </summary>
        /// <param name="input">Instance of Caution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Caution input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LapStart == input.LapStart ||
                    (this.LapStart != null &&
                    this.LapStart.Equals(input.LapStart))
                ) && 
                (
                    this.LapEnd == input.LapEnd ||
                    (this.LapEnd != null &&
                    this.LapEnd.Equals(input.LapEnd))
                ) && 
                (
                    this.Beneficiary == input.Beneficiary ||
                    (this.Beneficiary != null &&
                    this.Beneficiary.Equals(input.Beneficiary))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.FlagTime == input.FlagTime ||
                    (this.FlagTime != null &&
                    this.FlagTime.Equals(input.FlagTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LapStart != null)
                    hashCode = hashCode * 59 + this.LapStart.GetHashCode();
                if (this.LapEnd != null)
                    hashCode = hashCode * 59 + this.LapEnd.GetHashCode();
                if (this.Beneficiary != null)
                    hashCode = hashCode * 59 + this.Beneficiary.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.FlagTime != null)
                    hashCode = hashCode * 59 + this.FlagTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
