/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// RunDetails
    /// </summary>
    [DataContract]
        public partial class RunDetails :  IEquatable<RunDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunDetails" /> class.
        /// </summary>
        /// <param name="name">The name of the run.</param>
        /// <param name="startTime">Scheduled start time.</param>
        /// <param name="runState">runState.</param>
        /// <param name="runType">runType.</param>
        /// <param name="duration">The scheduled duration of the run in seconds.</param>
        /// <param name="flags">Flags associated with this run.</param>
        public RunDetails(string name = default(string), DateTimeOffset? startTime = default(DateTimeOffset?), RunState runState = default(RunState), RunType runType = default(RunType), int? duration = default(int?), Collection<Flag> flags = default(Collection<Flag>))
        {
            this.Name = name;
            this.StartTime = startTime;
            this.RunState = runState;
            this.RunType = runType;
            this.Duration = duration;
            this.Flags = flags;
        }
        
        /// <summary>
        /// The name of the run
        /// </summary>
        /// <value>The name of the run</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Scheduled start time
        /// </summary>
        /// <value>Scheduled start time</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTimeOffset? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets RunState
        /// </summary>
        [DataMember(Name="run_state", EmitDefaultValue=false)]
        public RunState RunState { get; set; }

        /// <summary>
        /// Gets or Sets RunType
        /// </summary>
        [DataMember(Name="run_type", EmitDefaultValue=false)]
        public RunType RunType { get; set; }

        /// <summary>
        /// The scheduled duration of the run in seconds
        /// </summary>
        /// <value>The scheduled duration of the run in seconds</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Flag state:  (Inactive, Active, Completed)
        /// </summary>
        /// <value>Flag state:  (Inactive, Active, Completed)</value>
        [DataMember(Name="flag_state", EmitDefaultValue=false)]
        public string FlagState { get; private set; }

        /// <summary>
        /// Flags associated with this run
        /// </summary>
        /// <value>Flags associated with this run</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public Collection<Flag> Flags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunDetails {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  RunState: ").Append(RunState).Append("\n");
            sb.Append("  RunType: ").Append(RunType).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  FlagState: ").Append(FlagState).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunDetails);
        }

        /// <summary>
        /// Returns true if RunDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of RunDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.RunState == input.RunState ||
                    (this.RunState != null &&
                    this.RunState.Equals(input.RunState))
                ) && 
                (
                    this.RunType == input.RunType ||
                    (this.RunType != null &&
                    this.RunType.Equals(input.RunType))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.FlagState == input.FlagState ||
                    (this.FlagState != null &&
                    this.FlagState.Equals(input.FlagState))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    input.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.RunState != null)
                    hashCode = hashCode * 59 + this.RunState.GetHashCode();
                if (this.RunType != null)
                    hashCode = hashCode * 59 + this.RunType.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.FlagState != null)
                    hashCode = hashCode * 59 + this.FlagState.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
