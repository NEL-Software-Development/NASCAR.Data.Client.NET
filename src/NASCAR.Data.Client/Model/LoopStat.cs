/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// LoopStat
    /// </summary>
    [DataContract]
        public partial class LoopStat :  IEquatable<LoopStat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoopStat" /> class.
        /// </summary>
        /// <param name="startingPosition">Starting position.</param>
        /// <param name="midRacePosition">Mid race position.</param>
        /// <param name="closingLapsPosition">Closing laps positions.</param>
        /// <param name="closingLapsDiff">Closing laps differential.</param>
        /// <param name="finishingPosition">Finishing position.</param>
        /// <param name="bestPosition">Best position.</param>
        /// <param name="worstPosition">Worst position.</param>
        /// <param name="passingDifferential">Passing differential.</param>
        /// <param name="greenFlagPasses">Green flag passes.</param>
        /// <param name="greenFlagTimesPassed">Green flag paused.</param>
        /// <param name="qualityPasses">Quality passes.</param>
        /// <param name="averageRunningPosition">Average running position.</param>
        /// <param name="percentageQualityPasses">Percentage quality passes.</param>
        /// <param name="fastestLap">Fastest lap.</param>
        /// <param name="percentageFastestLaps">Percentage fastest laps.</param>
        /// <param name="lapsInTop15">Laps in Top15.</param>
        /// <param name="percentageLapsInTop15">Percentage laps in Top15.</param>
        /// <param name="lapsLed">Laps led.</param>
        /// <param name="percentageLapsLed">Percentage laps led.</param>
        /// <param name="lapsCompleted">Laps completed.</param>
        /// <param name="fastestOnRestarts">Fastest on restarts.</param>
        /// <param name="averageSpeedEarlyRun">Average speed early run.</param>
        /// <param name="averageSpeedLateRun">Average speed late run.</param>
        /// <param name="averageGreenFlagSpeed">Average green flag speed.</param>
        /// <param name="averageSpeedInTraffic">Average speed in traffic.</param>
        /// <param name="driverRating">Driver rating.</param>
        /// <param name="racesegment1MPHDifference">Race segment 1 MPH difference.</param>
        /// <param name="racesegment2MPHDifference">Race segment 2 MPH difference.</param>
        /// <param name="racesegment3MPHDifference">Race segment 3 MPH difference.</param>
        /// <param name="racesegment4MPHDifference">Race segment 4 MPH difference.</param>
        /// <param name="totalMPHDifference">Total MPH difference.</param>
        /// <param name="tookLead">Took lead.</param>
        /// <param name="vehicleNumber">Vehicle number.</param>
        public LoopStat(int? startingPosition = default(int?), int? midRacePosition = default(int?), int? closingLapsPosition = default(int?), int? closingLapsDiff = default(int?), int? finishingPosition = default(int?), int? bestPosition = default(int?), int? worstPosition = default(int?), int? passingDifferential = default(int?), int? greenFlagPasses = default(int?), int? greenFlagTimesPassed = default(int?), int? qualityPasses = default(int?), double? averageRunningPosition = default(double?), double? percentageQualityPasses = default(double?), int? fastestLap = default(int?), double? percentageFastestLaps = default(double?), int? lapsInTop15 = default(int?), double? percentageLapsInTop15 = default(double?), int? lapsLed = default(int?), double? percentageLapsLed = default(double?), int? lapsCompleted = default(int?), double? fastestOnRestarts = default(double?), double? averageSpeedEarlyRun = default(double?), double? averageSpeedLateRun = default(double?), double? averageGreenFlagSpeed = default(double?), double? averageSpeedInTraffic = default(double?), double? driverRating = default(double?), double? racesegment1MPHDifference = default(double?), double? racesegment2MPHDifference = default(double?), double? racesegment3MPHDifference = default(double?), double? racesegment4MPHDifference = default(double?), double? totalMPHDifference = default(double?), double? tookLead = default(double?), string vehicleNumber = default(string))
        {
            this.StartingPosition = startingPosition;
            this.MidRacePosition = midRacePosition;
            this.ClosingLapsPosition = closingLapsPosition;
            this.ClosingLapsDiff = closingLapsDiff;
            this.FinishingPosition = finishingPosition;
            this.BestPosition = bestPosition;
            this.WorstPosition = worstPosition;
            this.PassingDifferential = passingDifferential;
            this.GreenFlagPasses = greenFlagPasses;
            this.GreenFlagTimesPassed = greenFlagTimesPassed;
            this.QualityPasses = qualityPasses;
            this.AverageRunningPosition = averageRunningPosition;
            this.PercentageQualityPasses = percentageQualityPasses;
            this.FastestLap = fastestLap;
            this.PercentageFastestLaps = percentageFastestLaps;
            this.LapsInTop15 = lapsInTop15;
            this.PercentageLapsInTop15 = percentageLapsInTop15;
            this.LapsLed = lapsLed;
            this.PercentageLapsLed = percentageLapsLed;
            this.LapsCompleted = lapsCompleted;
            this.FastestOnRestarts = fastestOnRestarts;
            this.AverageSpeedEarlyRun = averageSpeedEarlyRun;
            this.AverageSpeedLateRun = averageSpeedLateRun;
            this.AverageGreenFlagSpeed = averageGreenFlagSpeed;
            this.AverageSpeedInTraffic = averageSpeedInTraffic;
            this.DriverRating = driverRating;
            this.Racesegment1MPHDifference = racesegment1MPHDifference;
            this.Racesegment2MPHDifference = racesegment2MPHDifference;
            this.Racesegment3MPHDifference = racesegment3MPHDifference;
            this.Racesegment4MPHDifference = racesegment4MPHDifference;
            this.TotalMPHDifference = totalMPHDifference;
            this.TookLead = tookLead;
            this.VehicleNumber = vehicleNumber;
        }
        
        /// <summary>
        /// Starting position
        /// </summary>
        /// <value>Starting position</value>
        [DataMember(Name="starting_position", EmitDefaultValue=false)]
        public int? StartingPosition { get; set; }

        /// <summary>
        /// Mid race position
        /// </summary>
        /// <value>Mid race position</value>
        [DataMember(Name="mid_race_position", EmitDefaultValue=false)]
        public int? MidRacePosition { get; set; }

        /// <summary>
        /// Closing laps positions
        /// </summary>
        /// <value>Closing laps positions</value>
        [DataMember(Name="closing_laps_position", EmitDefaultValue=false)]
        public int? ClosingLapsPosition { get; set; }

        /// <summary>
        /// Closing laps differential
        /// </summary>
        /// <value>Closing laps differential</value>
        [DataMember(Name="closing_laps_diff", EmitDefaultValue=false)]
        public int? ClosingLapsDiff { get; set; }

        /// <summary>
        /// Finishing position
        /// </summary>
        /// <value>Finishing position</value>
        [DataMember(Name="finishing_position", EmitDefaultValue=false)]
        public int? FinishingPosition { get; set; }

        /// <summary>
        /// Best position
        /// </summary>
        /// <value>Best position</value>
        [DataMember(Name="best_position", EmitDefaultValue=false)]
        public int? BestPosition { get; set; }

        /// <summary>
        /// Worst position
        /// </summary>
        /// <value>Worst position</value>
        [DataMember(Name="worst_position", EmitDefaultValue=false)]
        public int? WorstPosition { get; set; }

        /// <summary>
        /// Passing differential
        /// </summary>
        /// <value>Passing differential</value>
        [DataMember(Name="passing_differential", EmitDefaultValue=false)]
        public int? PassingDifferential { get; set; }

        /// <summary>
        /// Green flag passes
        /// </summary>
        /// <value>Green flag passes</value>
        [DataMember(Name="green_flag_passes", EmitDefaultValue=false)]
        public int? GreenFlagPasses { get; set; }

        /// <summary>
        /// Green flag paused
        /// </summary>
        /// <value>Green flag paused</value>
        [DataMember(Name="green_flag_times_passed", EmitDefaultValue=false)]
        public int? GreenFlagTimesPassed { get; set; }

        /// <summary>
        /// Quality passes
        /// </summary>
        /// <value>Quality passes</value>
        [DataMember(Name="quality_passes", EmitDefaultValue=false)]
        public int? QualityPasses { get; set; }

        /// <summary>
        /// Average running position
        /// </summary>
        /// <value>Average running position</value>
        [DataMember(Name="average_running_position", EmitDefaultValue=false)]
        public double? AverageRunningPosition { get; set; }

        /// <summary>
        /// Percentage quality passes
        /// </summary>
        /// <value>Percentage quality passes</value>
        [DataMember(Name="percentage_quality_passes", EmitDefaultValue=false)]
        public double? PercentageQualityPasses { get; set; }

        /// <summary>
        /// Fastest lap
        /// </summary>
        /// <value>Fastest lap</value>
        [DataMember(Name="fastest_lap", EmitDefaultValue=false)]
        public int? FastestLap { get; set; }

        /// <summary>
        /// Percentage fastest laps
        /// </summary>
        /// <value>Percentage fastest laps</value>
        [DataMember(Name="percentage_fastest_laps", EmitDefaultValue=false)]
        public double? PercentageFastestLaps { get; set; }

        /// <summary>
        /// Laps in Top15
        /// </summary>
        /// <value>Laps in Top15</value>
        [DataMember(Name="laps_in_top15", EmitDefaultValue=false)]
        public int? LapsInTop15 { get; set; }

        /// <summary>
        /// Percentage laps in Top15
        /// </summary>
        /// <value>Percentage laps in Top15</value>
        [DataMember(Name="percentage_laps_in_top15", EmitDefaultValue=false)]
        public double? PercentageLapsInTop15 { get; set; }

        /// <summary>
        /// Laps led
        /// </summary>
        /// <value>Laps led</value>
        [DataMember(Name="laps_led", EmitDefaultValue=false)]
        public int? LapsLed { get; set; }

        /// <summary>
        /// Percentage laps led
        /// </summary>
        /// <value>Percentage laps led</value>
        [DataMember(Name="percentage_laps_led", EmitDefaultValue=false)]
        public double? PercentageLapsLed { get; set; }

        /// <summary>
        /// Laps completed
        /// </summary>
        /// <value>Laps completed</value>
        [DataMember(Name="laps_completed", EmitDefaultValue=false)]
        public int? LapsCompleted { get; set; }

        /// <summary>
        /// Fastest on restarts
        /// </summary>
        /// <value>Fastest on restarts</value>
        [DataMember(Name="fastest_on_restarts", EmitDefaultValue=false)]
        public double? FastestOnRestarts { get; set; }

        /// <summary>
        /// Average speed early run
        /// </summary>
        /// <value>Average speed early run</value>
        [DataMember(Name="average_speed_early_run", EmitDefaultValue=false)]
        public double? AverageSpeedEarlyRun { get; set; }

        /// <summary>
        /// Average speed late run
        /// </summary>
        /// <value>Average speed late run</value>
        [DataMember(Name="average_speed_late_run", EmitDefaultValue=false)]
        public double? AverageSpeedLateRun { get; set; }

        /// <summary>
        /// Average green flag speed
        /// </summary>
        /// <value>Average green flag speed</value>
        [DataMember(Name="average_green_flag_speed", EmitDefaultValue=false)]
        public double? AverageGreenFlagSpeed { get; set; }

        /// <summary>
        /// Average speed in traffic
        /// </summary>
        /// <value>Average speed in traffic</value>
        [DataMember(Name="average_speed_in_traffic", EmitDefaultValue=false)]
        public double? AverageSpeedInTraffic { get; set; }

        /// <summary>
        /// Driver rating
        /// </summary>
        /// <value>Driver rating</value>
        [DataMember(Name="driver_rating", EmitDefaultValue=false)]
        public double? DriverRating { get; set; }

        /// <summary>
        /// Race segment 1 MPH difference
        /// </summary>
        /// <value>Race segment 1 MPH difference</value>
        [DataMember(Name="racesegment1_MPH_difference", EmitDefaultValue=false)]
        public double? Racesegment1MPHDifference { get; set; }

        /// <summary>
        /// Race segment 2 MPH difference
        /// </summary>
        /// <value>Race segment 2 MPH difference</value>
        [DataMember(Name="racesegment2_MPH_difference", EmitDefaultValue=false)]
        public double? Racesegment2MPHDifference { get; set; }

        /// <summary>
        /// Race segment 3 MPH difference
        /// </summary>
        /// <value>Race segment 3 MPH difference</value>
        [DataMember(Name="racesegment3_MPH_difference", EmitDefaultValue=false)]
        public double? Racesegment3MPHDifference { get; set; }

        /// <summary>
        /// Race segment 4 MPH difference
        /// </summary>
        /// <value>Race segment 4 MPH difference</value>
        [DataMember(Name="racesegment4_MPH_difference", EmitDefaultValue=false)]
        public double? Racesegment4MPHDifference { get; set; }

        /// <summary>
        /// Total MPH difference
        /// </summary>
        /// <value>Total MPH difference</value>
        [DataMember(Name="total_MPH_difference", EmitDefaultValue=false)]
        public double? TotalMPHDifference { get; set; }

        /// <summary>
        /// Took lead
        /// </summary>
        /// <value>Took lead</value>
        [DataMember(Name="took_lead", EmitDefaultValue=false)]
        public double? TookLead { get; set; }

        /// <summary>
        /// Vehicle number
        /// </summary>
        /// <value>Vehicle number</value>
        [DataMember(Name="vehicle_number", EmitDefaultValue=false)]
        public string VehicleNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoopStat {\n");
            sb.Append("  StartingPosition: ").Append(StartingPosition).Append("\n");
            sb.Append("  MidRacePosition: ").Append(MidRacePosition).Append("\n");
            sb.Append("  ClosingLapsPosition: ").Append(ClosingLapsPosition).Append("\n");
            sb.Append("  ClosingLapsDiff: ").Append(ClosingLapsDiff).Append("\n");
            sb.Append("  FinishingPosition: ").Append(FinishingPosition).Append("\n");
            sb.Append("  BestPosition: ").Append(BestPosition).Append("\n");
            sb.Append("  WorstPosition: ").Append(WorstPosition).Append("\n");
            sb.Append("  PassingDifferential: ").Append(PassingDifferential).Append("\n");
            sb.Append("  GreenFlagPasses: ").Append(GreenFlagPasses).Append("\n");
            sb.Append("  GreenFlagTimesPassed: ").Append(GreenFlagTimesPassed).Append("\n");
            sb.Append("  QualityPasses: ").Append(QualityPasses).Append("\n");
            sb.Append("  AverageRunningPosition: ").Append(AverageRunningPosition).Append("\n");
            sb.Append("  PercentageQualityPasses: ").Append(PercentageQualityPasses).Append("\n");
            sb.Append("  FastestLap: ").Append(FastestLap).Append("\n");
            sb.Append("  PercentageFastestLaps: ").Append(PercentageFastestLaps).Append("\n");
            sb.Append("  LapsInTop15: ").Append(LapsInTop15).Append("\n");
            sb.Append("  PercentageLapsInTop15: ").Append(PercentageLapsInTop15).Append("\n");
            sb.Append("  LapsLed: ").Append(LapsLed).Append("\n");
            sb.Append("  PercentageLapsLed: ").Append(PercentageLapsLed).Append("\n");
            sb.Append("  LapsCompleted: ").Append(LapsCompleted).Append("\n");
            sb.Append("  FastestOnRestarts: ").Append(FastestOnRestarts).Append("\n");
            sb.Append("  AverageSpeedEarlyRun: ").Append(AverageSpeedEarlyRun).Append("\n");
            sb.Append("  AverageSpeedLateRun: ").Append(AverageSpeedLateRun).Append("\n");
            sb.Append("  AverageGreenFlagSpeed: ").Append(AverageGreenFlagSpeed).Append("\n");
            sb.Append("  AverageSpeedInTraffic: ").Append(AverageSpeedInTraffic).Append("\n");
            sb.Append("  DriverRating: ").Append(DriverRating).Append("\n");
            sb.Append("  Racesegment1MPHDifference: ").Append(Racesegment1MPHDifference).Append("\n");
            sb.Append("  Racesegment2MPHDifference: ").Append(Racesegment2MPHDifference).Append("\n");
            sb.Append("  Racesegment3MPHDifference: ").Append(Racesegment3MPHDifference).Append("\n");
            sb.Append("  Racesegment4MPHDifference: ").Append(Racesegment4MPHDifference).Append("\n");
            sb.Append("  TotalMPHDifference: ").Append(TotalMPHDifference).Append("\n");
            sb.Append("  TookLead: ").Append(TookLead).Append("\n");
            sb.Append("  VehicleNumber: ").Append(VehicleNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoopStat);
        }

        /// <summary>
        /// Returns true if LoopStat instances are equal
        /// </summary>
        /// <param name="input">Instance of LoopStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoopStat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartingPosition == input.StartingPosition ||
                    (this.StartingPosition != null &&
                    this.StartingPosition.Equals(input.StartingPosition))
                ) && 
                (
                    this.MidRacePosition == input.MidRacePosition ||
                    (this.MidRacePosition != null &&
                    this.MidRacePosition.Equals(input.MidRacePosition))
                ) && 
                (
                    this.ClosingLapsPosition == input.ClosingLapsPosition ||
                    (this.ClosingLapsPosition != null &&
                    this.ClosingLapsPosition.Equals(input.ClosingLapsPosition))
                ) && 
                (
                    this.ClosingLapsDiff == input.ClosingLapsDiff ||
                    (this.ClosingLapsDiff != null &&
                    this.ClosingLapsDiff.Equals(input.ClosingLapsDiff))
                ) && 
                (
                    this.FinishingPosition == input.FinishingPosition ||
                    (this.FinishingPosition != null &&
                    this.FinishingPosition.Equals(input.FinishingPosition))
                ) && 
                (
                    this.BestPosition == input.BestPosition ||
                    (this.BestPosition != null &&
                    this.BestPosition.Equals(input.BestPosition))
                ) && 
                (
                    this.WorstPosition == input.WorstPosition ||
                    (this.WorstPosition != null &&
                    this.WorstPosition.Equals(input.WorstPosition))
                ) && 
                (
                    this.PassingDifferential == input.PassingDifferential ||
                    (this.PassingDifferential != null &&
                    this.PassingDifferential.Equals(input.PassingDifferential))
                ) && 
                (
                    this.GreenFlagPasses == input.GreenFlagPasses ||
                    (this.GreenFlagPasses != null &&
                    this.GreenFlagPasses.Equals(input.GreenFlagPasses))
                ) && 
                (
                    this.GreenFlagTimesPassed == input.GreenFlagTimesPassed ||
                    (this.GreenFlagTimesPassed != null &&
                    this.GreenFlagTimesPassed.Equals(input.GreenFlagTimesPassed))
                ) && 
                (
                    this.QualityPasses == input.QualityPasses ||
                    (this.QualityPasses != null &&
                    this.QualityPasses.Equals(input.QualityPasses))
                ) && 
                (
                    this.AverageRunningPosition == input.AverageRunningPosition ||
                    (this.AverageRunningPosition != null &&
                    this.AverageRunningPosition.Equals(input.AverageRunningPosition))
                ) && 
                (
                    this.PercentageQualityPasses == input.PercentageQualityPasses ||
                    (this.PercentageQualityPasses != null &&
                    this.PercentageQualityPasses.Equals(input.PercentageQualityPasses))
                ) && 
                (
                    this.FastestLap == input.FastestLap ||
                    (this.FastestLap != null &&
                    this.FastestLap.Equals(input.FastestLap))
                ) && 
                (
                    this.PercentageFastestLaps == input.PercentageFastestLaps ||
                    (this.PercentageFastestLaps != null &&
                    this.PercentageFastestLaps.Equals(input.PercentageFastestLaps))
                ) && 
                (
                    this.LapsInTop15 == input.LapsInTop15 ||
                    (this.LapsInTop15 != null &&
                    this.LapsInTop15.Equals(input.LapsInTop15))
                ) && 
                (
                    this.PercentageLapsInTop15 == input.PercentageLapsInTop15 ||
                    (this.PercentageLapsInTop15 != null &&
                    this.PercentageLapsInTop15.Equals(input.PercentageLapsInTop15))
                ) && 
                (
                    this.LapsLed == input.LapsLed ||
                    (this.LapsLed != null &&
                    this.LapsLed.Equals(input.LapsLed))
                ) && 
                (
                    this.PercentageLapsLed == input.PercentageLapsLed ||
                    (this.PercentageLapsLed != null &&
                    this.PercentageLapsLed.Equals(input.PercentageLapsLed))
                ) && 
                (
                    this.LapsCompleted == input.LapsCompleted ||
                    (this.LapsCompleted != null &&
                    this.LapsCompleted.Equals(input.LapsCompleted))
                ) && 
                (
                    this.FastestOnRestarts == input.FastestOnRestarts ||
                    (this.FastestOnRestarts != null &&
                    this.FastestOnRestarts.Equals(input.FastestOnRestarts))
                ) && 
                (
                    this.AverageSpeedEarlyRun == input.AverageSpeedEarlyRun ||
                    (this.AverageSpeedEarlyRun != null &&
                    this.AverageSpeedEarlyRun.Equals(input.AverageSpeedEarlyRun))
                ) && 
                (
                    this.AverageSpeedLateRun == input.AverageSpeedLateRun ||
                    (this.AverageSpeedLateRun != null &&
                    this.AverageSpeedLateRun.Equals(input.AverageSpeedLateRun))
                ) && 
                (
                    this.AverageGreenFlagSpeed == input.AverageGreenFlagSpeed ||
                    (this.AverageGreenFlagSpeed != null &&
                    this.AverageGreenFlagSpeed.Equals(input.AverageGreenFlagSpeed))
                ) && 
                (
                    this.AverageSpeedInTraffic == input.AverageSpeedInTraffic ||
                    (this.AverageSpeedInTraffic != null &&
                    this.AverageSpeedInTraffic.Equals(input.AverageSpeedInTraffic))
                ) && 
                (
                    this.DriverRating == input.DriverRating ||
                    (this.DriverRating != null &&
                    this.DriverRating.Equals(input.DriverRating))
                ) && 
                (
                    this.Racesegment1MPHDifference == input.Racesegment1MPHDifference ||
                    (this.Racesegment1MPHDifference != null &&
                    this.Racesegment1MPHDifference.Equals(input.Racesegment1MPHDifference))
                ) && 
                (
                    this.Racesegment2MPHDifference == input.Racesegment2MPHDifference ||
                    (this.Racesegment2MPHDifference != null &&
                    this.Racesegment2MPHDifference.Equals(input.Racesegment2MPHDifference))
                ) && 
                (
                    this.Racesegment3MPHDifference == input.Racesegment3MPHDifference ||
                    (this.Racesegment3MPHDifference != null &&
                    this.Racesegment3MPHDifference.Equals(input.Racesegment3MPHDifference))
                ) && 
                (
                    this.Racesegment4MPHDifference == input.Racesegment4MPHDifference ||
                    (this.Racesegment4MPHDifference != null &&
                    this.Racesegment4MPHDifference.Equals(input.Racesegment4MPHDifference))
                ) && 
                (
                    this.TotalMPHDifference == input.TotalMPHDifference ||
                    (this.TotalMPHDifference != null &&
                    this.TotalMPHDifference.Equals(input.TotalMPHDifference))
                ) && 
                (
                    this.TookLead == input.TookLead ||
                    (this.TookLead != null &&
                    this.TookLead.Equals(input.TookLead))
                ) && 
                (
                    this.VehicleNumber == input.VehicleNumber ||
                    (this.VehicleNumber != null &&
                    this.VehicleNumber.Equals(input.VehicleNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartingPosition != null)
                    hashCode = hashCode * 59 + this.StartingPosition.GetHashCode();
                if (this.MidRacePosition != null)
                    hashCode = hashCode * 59 + this.MidRacePosition.GetHashCode();
                if (this.ClosingLapsPosition != null)
                    hashCode = hashCode * 59 + this.ClosingLapsPosition.GetHashCode();
                if (this.ClosingLapsDiff != null)
                    hashCode = hashCode * 59 + this.ClosingLapsDiff.GetHashCode();
                if (this.FinishingPosition != null)
                    hashCode = hashCode * 59 + this.FinishingPosition.GetHashCode();
                if (this.BestPosition != null)
                    hashCode = hashCode * 59 + this.BestPosition.GetHashCode();
                if (this.WorstPosition != null)
                    hashCode = hashCode * 59 + this.WorstPosition.GetHashCode();
                if (this.PassingDifferential != null)
                    hashCode = hashCode * 59 + this.PassingDifferential.GetHashCode();
                if (this.GreenFlagPasses != null)
                    hashCode = hashCode * 59 + this.GreenFlagPasses.GetHashCode();
                if (this.GreenFlagTimesPassed != null)
                    hashCode = hashCode * 59 + this.GreenFlagTimesPassed.GetHashCode();
                if (this.QualityPasses != null)
                    hashCode = hashCode * 59 + this.QualityPasses.GetHashCode();
                if (this.AverageRunningPosition != null)
                    hashCode = hashCode * 59 + this.AverageRunningPosition.GetHashCode();
                if (this.PercentageQualityPasses != null)
                    hashCode = hashCode * 59 + this.PercentageQualityPasses.GetHashCode();
                if (this.FastestLap != null)
                    hashCode = hashCode * 59 + this.FastestLap.GetHashCode();
                if (this.PercentageFastestLaps != null)
                    hashCode = hashCode * 59 + this.PercentageFastestLaps.GetHashCode();
                if (this.LapsInTop15 != null)
                    hashCode = hashCode * 59 + this.LapsInTop15.GetHashCode();
                if (this.PercentageLapsInTop15 != null)
                    hashCode = hashCode * 59 + this.PercentageLapsInTop15.GetHashCode();
                if (this.LapsLed != null)
                    hashCode = hashCode * 59 + this.LapsLed.GetHashCode();
                if (this.PercentageLapsLed != null)
                    hashCode = hashCode * 59 + this.PercentageLapsLed.GetHashCode();
                if (this.LapsCompleted != null)
                    hashCode = hashCode * 59 + this.LapsCompleted.GetHashCode();
                if (this.FastestOnRestarts != null)
                    hashCode = hashCode * 59 + this.FastestOnRestarts.GetHashCode();
                if (this.AverageSpeedEarlyRun != null)
                    hashCode = hashCode * 59 + this.AverageSpeedEarlyRun.GetHashCode();
                if (this.AverageSpeedLateRun != null)
                    hashCode = hashCode * 59 + this.AverageSpeedLateRun.GetHashCode();
                if (this.AverageGreenFlagSpeed != null)
                    hashCode = hashCode * 59 + this.AverageGreenFlagSpeed.GetHashCode();
                if (this.AverageSpeedInTraffic != null)
                    hashCode = hashCode * 59 + this.AverageSpeedInTraffic.GetHashCode();
                if (this.DriverRating != null)
                    hashCode = hashCode * 59 + this.DriverRating.GetHashCode();
                if (this.Racesegment1MPHDifference != null)
                    hashCode = hashCode * 59 + this.Racesegment1MPHDifference.GetHashCode();
                if (this.Racesegment2MPHDifference != null)
                    hashCode = hashCode * 59 + this.Racesegment2MPHDifference.GetHashCode();
                if (this.Racesegment3MPHDifference != null)
                    hashCode = hashCode * 59 + this.Racesegment3MPHDifference.GetHashCode();
                if (this.Racesegment4MPHDifference != null)
                    hashCode = hashCode * 59 + this.Racesegment4MPHDifference.GetHashCode();
                if (this.TotalMPHDifference != null)
                    hashCode = hashCode * 59 + this.TotalMPHDifference.GetHashCode();
                if (this.TookLead != null)
                    hashCode = hashCode * 59 + this.TookLead.GetHashCode();
                if (this.VehicleNumber != null)
                    hashCode = hashCode * 59 + this.VehicleNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
