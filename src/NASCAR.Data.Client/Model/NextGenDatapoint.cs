/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// NextGenDatapoint
    /// </summary>
    [DataContract]
        public partial class NextGenDatapoint :  IEquatable<NextGenDatapoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextGenDatapoint" /> class.
        /// </summary>
        /// <param name="datapointId">datapointId.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        public NextGenDatapoint(string datapointId = default(string), string name = default(string), string description = default(string))
        {
            this.DatapointId = datapointId;
            this.Name = name;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets DatapointId
        /// </summary>
        [DataMember(Name="datapoint_id", EmitDefaultValue=false)]
        public string DatapointId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextGenDatapoint {\n");
            sb.Append("  DatapointId: ").Append(DatapointId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextGenDatapoint);
        }

        /// <summary>
        /// Returns true if NextGenDatapoint instances are equal
        /// </summary>
        /// <param name="input">Instance of NextGenDatapoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextGenDatapoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatapointId == input.DatapointId ||
                    (this.DatapointId != null &&
                    this.DatapointId.Equals(input.DatapointId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatapointId != null)
                    hashCode = hashCode * 59 + this.DatapointId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
