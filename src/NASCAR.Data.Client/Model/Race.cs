/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// Race
    /// </summary>
    [DataContract]
        public partial class Race :  IEquatable<Race>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Race" /> class.
        /// </summary>
        /// <param name="id">The id of the race.</param>
        /// <param name="principalRaceId">The principal race id of the race.</param>
        /// <param name="raceweekId">The race.</param>
        /// <param name="seriesId">The series id of the race.</param>
        /// <param name="name">The race name.</param>
        /// <param name="promoter">The promoter of the race.</param>
        /// <param name="laps">Laps.</param>
        /// <param name="distance">Race distance.</param>
        /// <param name="date">Race date.</param>
        /// <param name="comments">Race comments.</param>
        public Race(int? id = default(int?), int? principalRaceId = default(int?), int? raceweekId = default(int?), int? seriesId = default(int?), string name = default(string), string promoter = default(string), int? laps = default(int?), double? distance = default(double?), DateTimeOffset? date = default(DateTimeOffset?), string comments = default(string))
        {
            this.Id = id;
            this.PrincipalRaceId = principalRaceId;
            this.RaceweekId = raceweekId;
            this.SeriesId = seriesId;
            this.Name = name;
            this.Promoter = promoter;
            this.Laps = laps;
            this.Distance = distance;
            this.Date = date;
            this.Comments = comments;
        }
        
        /// <summary>
        /// The id of the race
        /// </summary>
        /// <value>The id of the race</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The principal race id of the race
        /// </summary>
        /// <value>The principal race id of the race</value>
        [DataMember(Name="principal_race_id", EmitDefaultValue=false)]
        public int? PrincipalRaceId { get; set; }

        /// <summary>
        /// The race
        /// </summary>
        /// <value>The race</value>
        [DataMember(Name="raceweek_id", EmitDefaultValue=false)]
        public int? RaceweekId { get; set; }

        /// <summary>
        /// The series id of the race
        /// </summary>
        /// <value>The series id of the race</value>
        [DataMember(Name="series_id", EmitDefaultValue=false)]
        public int? SeriesId { get; set; }

        /// <summary>
        /// The race name
        /// </summary>
        /// <value>The race name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The promoter of the race
        /// </summary>
        /// <value>The promoter of the race</value>
        [DataMember(Name="promoter", EmitDefaultValue=false)]
        public string Promoter { get; set; }

        /// <summary>
        /// Laps
        /// </summary>
        /// <value>Laps</value>
        [DataMember(Name="laps", EmitDefaultValue=false)]
        public int? Laps { get; set; }

        /// <summary>
        /// Race distance
        /// </summary>
        /// <value>Race distance</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// URL to practice results
        /// </summary>
        /// <value>URL to practice results</value>
        [DataMember(Name="practice_results", EmitDefaultValue=false)]
        public string PracticeResults { get; private set; }

        /// <summary>
        /// URL to Qualifying results
        /// </summary>
        /// <value>URL to Qualifying results</value>
        [DataMember(Name="qualifying_results", EmitDefaultValue=false)]
        public string QualifyingResults { get; private set; }

        /// <summary>
        /// URL to race results
        /// </summary>
        /// <value>URL to race results</value>
        [DataMember(Name="race_results", EmitDefaultValue=false)]
        public string RaceResults { get; private set; }

        /// <summary>
        /// URL to race cautions
        /// </summary>
        /// <value>URL to race cautions</value>
        [DataMember(Name="cautions", EmitDefaultValue=false)]
        public string Cautions { get; private set; }

        /// <summary>
        /// URL to race infractions
        /// </summary>
        /// <value>URL to race infractions</value>
        [DataMember(Name="infractions", EmitDefaultValue=false)]
        public string Infractions { get; private set; }

        /// <summary>
        /// URL to race lap leaders
        /// </summary>
        /// <value>URL to race lap leaders</value>
        [DataMember(Name="lap_leaders", EmitDefaultValue=false)]
        public string LapLeaders { get; private set; }

        /// <summary>
        /// URL to race pitstops
        /// </summary>
        /// <value>URL to race pitstops</value>
        [DataMember(Name="pitstops", EmitDefaultValue=false)]
        public string Pitstops { get; private set; }

        /// <summary>
        /// Race date
        /// </summary>
        /// <value>Race date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Race comments
        /// </summary>
        /// <value>Race comments</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Race {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PrincipalRaceId: ").Append(PrincipalRaceId).Append("\n");
            sb.Append("  RaceweekId: ").Append(RaceweekId).Append("\n");
            sb.Append("  SeriesId: ").Append(SeriesId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Promoter: ").Append(Promoter).Append("\n");
            sb.Append("  Laps: ").Append(Laps).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  PracticeResults: ").Append(PracticeResults).Append("\n");
            sb.Append("  QualifyingResults: ").Append(QualifyingResults).Append("\n");
            sb.Append("  RaceResults: ").Append(RaceResults).Append("\n");
            sb.Append("  Cautions: ").Append(Cautions).Append("\n");
            sb.Append("  Infractions: ").Append(Infractions).Append("\n");
            sb.Append("  LapLeaders: ").Append(LapLeaders).Append("\n");
            sb.Append("  Pitstops: ").Append(Pitstops).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Race);
        }

        /// <summary>
        /// Returns true if Race instances are equal
        /// </summary>
        /// <param name="input">Instance of Race to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Race input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PrincipalRaceId == input.PrincipalRaceId ||
                    (this.PrincipalRaceId != null &&
                    this.PrincipalRaceId.Equals(input.PrincipalRaceId))
                ) && 
                (
                    this.RaceweekId == input.RaceweekId ||
                    (this.RaceweekId != null &&
                    this.RaceweekId.Equals(input.RaceweekId))
                ) && 
                (
                    this.SeriesId == input.SeriesId ||
                    (this.SeriesId != null &&
                    this.SeriesId.Equals(input.SeriesId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Promoter == input.Promoter ||
                    (this.Promoter != null &&
                    this.Promoter.Equals(input.Promoter))
                ) && 
                (
                    this.Laps == input.Laps ||
                    (this.Laps != null &&
                    this.Laps.Equals(input.Laps))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.PracticeResults == input.PracticeResults ||
                    (this.PracticeResults != null &&
                    this.PracticeResults.Equals(input.PracticeResults))
                ) && 
                (
                    this.QualifyingResults == input.QualifyingResults ||
                    (this.QualifyingResults != null &&
                    this.QualifyingResults.Equals(input.QualifyingResults))
                ) && 
                (
                    this.RaceResults == input.RaceResults ||
                    (this.RaceResults != null &&
                    this.RaceResults.Equals(input.RaceResults))
                ) && 
                (
                    this.Cautions == input.Cautions ||
                    (this.Cautions != null &&
                    this.Cautions.Equals(input.Cautions))
                ) && 
                (
                    this.Infractions == input.Infractions ||
                    (this.Infractions != null &&
                    this.Infractions.Equals(input.Infractions))
                ) && 
                (
                    this.LapLeaders == input.LapLeaders ||
                    (this.LapLeaders != null &&
                    this.LapLeaders.Equals(input.LapLeaders))
                ) && 
                (
                    this.Pitstops == input.Pitstops ||
                    (this.Pitstops != null &&
                    this.Pitstops.Equals(input.Pitstops))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PrincipalRaceId != null)
                    hashCode = hashCode * 59 + this.PrincipalRaceId.GetHashCode();
                if (this.RaceweekId != null)
                    hashCode = hashCode * 59 + this.RaceweekId.GetHashCode();
                if (this.SeriesId != null)
                    hashCode = hashCode * 59 + this.SeriesId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Promoter != null)
                    hashCode = hashCode * 59 + this.Promoter.GetHashCode();
                if (this.Laps != null)
                    hashCode = hashCode * 59 + this.Laps.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.PracticeResults != null)
                    hashCode = hashCode * 59 + this.PracticeResults.GetHashCode();
                if (this.QualifyingResults != null)
                    hashCode = hashCode * 59 + this.QualifyingResults.GetHashCode();
                if (this.RaceResults != null)
                    hashCode = hashCode * 59 + this.RaceResults.GetHashCode();
                if (this.Cautions != null)
                    hashCode = hashCode * 59 + this.Cautions.GetHashCode();
                if (this.Infractions != null)
                    hashCode = hashCode * 59 + this.Infractions.GetHashCode();
                if (this.LapLeaders != null)
                    hashCode = hashCode * 59 + this.LapLeaders.GetHashCode();
                if (this.Pitstops != null)
                    hashCode = hashCode * 59 + this.Pitstops.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
