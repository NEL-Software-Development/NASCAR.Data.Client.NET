/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// OSSScan
    /// </summary>
    [DataContract]
        public partial class OSSScan :  IEquatable<OSSScan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OSSScan" /> class.
        /// </summary>
        /// <param name="vehicleNumber">Vehicle number.</param>
        /// <param name="chassis">Chassis.</param>
        /// <param name="limitsBodyoffsetMin">Body offset minimum.</param>
        /// <param name="limitsBodyoffsetMax">Body offset maximum.</param>
        /// <param name="passfailsBodyoffset">Body offset pass/fails.</param>
        /// <param name="resultsBodyoffset">Results body offset.</param>
        /// <param name="limitsCamberLfMin">Left front camber minimum.</param>
        /// <param name="limitsCamberLfMax">Left front camber maximum.</param>
        /// <param name="passfailsCamberLf">Left front camber pass/fails.</param>
        /// <param name="resultsCamberLf">Left front camber results.</param>
        /// <param name="limitsCamberLrMin">Left rear camber minimum.</param>
        /// <param name="limitsCamberLrMax">Left rear camber maximum.</param>
        /// <param name="passfailsCamberLr">Left rear camber pass/fails.</param>
        /// <param name="resultsCamberLr">Left rear camber results.</param>
        /// <param name="limitsCamberRfMin">Right front camber minimum.</param>
        /// <param name="limitsCamberRfMax">Right front camber maximum.</param>
        /// <param name="passfailsCamberRf">Right front camber pass/fails.</param>
        /// <param name="resultsCamberRf">Right front camber results.</param>
        /// <param name="limitsCamberRrMin">Right rear camber minimum.</param>
        /// <param name="limitsCamberRrMax">Right rear camber maximum.</param>
        /// <param name="passfailsCamberRr">Right rear camber pass/fails.</param>
        /// <param name="resultsCamberRr">Right rear camber results.</param>
        /// <param name="limitsLfFramerailMin">Left front framerail minimum.</param>
        /// <param name="limitsLfFramerailMax">Left front framework maximum.</param>
        /// <param name="passfailsLfFramerail">Left front framerail pass/fails.</param>
        /// <param name="resultsLfFramerail">Left front framework results.</param>
        /// <param name="limitsLrFramerailMin">Left rear framerail minimum.</param>
        /// <param name="limitsLrFramerailMax">Left rear framerail maximum.</param>
        /// <param name="passfailsLrFramerail">Left rear framerail pass/fails.</param>
        /// <param name="resultsLrFramerail">Left rear framerail results.</param>
        /// <param name="limitsRfFramerailMin">Right front framerail minimum.</param>
        /// <param name="limitsRfFramerailMax">Right front framerail maximum.</param>
        /// <param name="passfailsRfFramerail">Right front framerail pass/fails.</param>
        /// <param name="resultsRfFramerail">Right front framerail results.</param>
        /// <param name="limitsRhLocationLeftMin">Right hand left minimum.</param>
        /// <param name="limitsRhLocationLeftMax">Right hand left maximum.</param>
        /// <param name="passfailsRhLocationLeft">Right hand left pass/fails.</param>
        /// <param name="resultsRhLocationLeft">Right hand left results.</param>
        /// <param name="limitsRhLocationRightMin">Right hand right min.</param>
        /// <param name="limitsRhLocationRightMax">Right hand right max.</param>
        /// <param name="passfailsRhLocationRight">Right hand right pass/fails.</param>
        /// <param name="resultsRhLocationRight">Right hand right results.</param>
        /// <param name="limitsRhSkewMin">Right right skew minimum.</param>
        /// <param name="limitsRhSkewMax">Right hand skew maximum.</param>
        /// <param name="passfailsRhSkew">Right hand skew pass/fails.</param>
        /// <param name="resultsRhSkew">Right hand skew results.</param>
        /// <param name="limitsRrFramerailMin">Right rear framerail minimum.</param>
        /// <param name="limitsRrFramerailMax">Right rear framerail maximum.</param>
        /// <param name="passfailsRrFramerail">Right rear framerail pass/fails.</param>
        /// <param name="resultsRrFramerail">Right rear framerail results.</param>
        /// <param name="limitsRightParallelMin">Right parallel minimum.</param>
        /// <param name="limitsRightParallelMax">Right parallel maximum.</param>
        /// <param name="passfailsRightParallel">Right parallel pass/fails.</param>
        /// <param name="resultsRightParallel">Right parallel results.</param>
        /// <param name="limitsTreadwidthFrontMin">Front treadwidth minimum.</param>
        /// <param name="limitsTreadwidthFrontMax">Front treadwidth maximum.</param>
        /// <param name="passfailsTreadwidthFront">Front treadwidth pass/fails.</param>
        /// <param name="resultsTreadwidthFront">Front treadwidth results.</param>
        /// <param name="limitsTreadwidthRearMin">Rear treadwidth minimum.</param>
        /// <param name="limitsTreadwidthRearMax">Rear treadwidth maximum.</param>
        /// <param name="passfailsTreadwidthRear">Rear treadwidth pass/fails.</param>
        /// <param name="resultsTreadwidthRear">Rear treadwidth results.</param>
        /// <param name="limitsWheelbaseLeftMin">Left wheelbase minimum.</param>
        /// <param name="limitsWheelbaseLeftMax">Left wheelbase maximum.</param>
        /// <param name="passfailsWheelbaseLeft">Left wheelbase pass/fails.</param>
        /// <param name="resultsWheelbaseLeft">Left wheelbase results.</param>
        /// <param name="limitsWheelbaseRightMin">Right wheelbase minimum.</param>
        /// <param name="limitsWheelbaseRightMax">Right wheelbase maximum.</param>
        /// <param name="passfailsWheelbaseRight">Right wheelbase pass/fails.</param>
        /// <param name="resultsWheelbaseRight">Right wheelbase results.</param>
        /// <param name="limitsToeLrMin">Left rear toe minimum.</param>
        /// <param name="limitsToeLrMax">Left rear toe maximum.</param>
        /// <param name="passfailsToeLr">Left rear toe pass/fails.</param>
        /// <param name="resultsToeLr">Left rear toe results.</param>
        /// <param name="limitsToeRrMin">Right rear toe minimum.</param>
        /// <param name="limitsToeRrMax">Right rear toe maximum.</param>
        /// <param name="passfailsToeRr">Right rear pass/fails.</param>
        /// <param name="resultsToeRr">Right rear toe results.</param>
        /// <param name="inspectionDate">Inspection date.</param>
        public OSSScan(string vehicleNumber = default(string), string chassis = default(string), double? limitsBodyoffsetMin = default(double?), double? limitsBodyoffsetMax = default(double?), bool? passfailsBodyoffset = default(bool?), double? resultsBodyoffset = default(double?), double? limitsCamberLfMin = default(double?), double? limitsCamberLfMax = default(double?), bool? passfailsCamberLf = default(bool?), double? resultsCamberLf = default(double?), double? limitsCamberLrMin = default(double?), double? limitsCamberLrMax = default(double?), bool? passfailsCamberLr = default(bool?), double? resultsCamberLr = default(double?), double? limitsCamberRfMin = default(double?), double? limitsCamberRfMax = default(double?), bool? passfailsCamberRf = default(bool?), double? resultsCamberRf = default(double?), double? limitsCamberRrMin = default(double?), double? limitsCamberRrMax = default(double?), bool? passfailsCamberRr = default(bool?), double? resultsCamberRr = default(double?), double? limitsLfFramerailMin = default(double?), double? limitsLfFramerailMax = default(double?), bool? passfailsLfFramerail = default(bool?), double? resultsLfFramerail = default(double?), double? limitsLrFramerailMin = default(double?), double? limitsLrFramerailMax = default(double?), bool? passfailsLrFramerail = default(bool?), double? resultsLrFramerail = default(double?), double? limitsRfFramerailMin = default(double?), double? limitsRfFramerailMax = default(double?), bool? passfailsRfFramerail = default(bool?), double? resultsRfFramerail = default(double?), double? limitsRhLocationLeftMin = default(double?), double? limitsRhLocationLeftMax = default(double?), bool? passfailsRhLocationLeft = default(bool?), double? resultsRhLocationLeft = default(double?), double? limitsRhLocationRightMin = default(double?), double? limitsRhLocationRightMax = default(double?), bool? passfailsRhLocationRight = default(bool?), double? resultsRhLocationRight = default(double?), double? limitsRhSkewMin = default(double?), double? limitsRhSkewMax = default(double?), bool? passfailsRhSkew = default(bool?), double? resultsRhSkew = default(double?), double? limitsRrFramerailMin = default(double?), double? limitsRrFramerailMax = default(double?), bool? passfailsRrFramerail = default(bool?), double? resultsRrFramerail = default(double?), double? limitsRightParallelMin = default(double?), double? limitsRightParallelMax = default(double?), bool? passfailsRightParallel = default(bool?), double? resultsRightParallel = default(double?), double? limitsTreadwidthFrontMin = default(double?), double? limitsTreadwidthFrontMax = default(double?), bool? passfailsTreadwidthFront = default(bool?), double? resultsTreadwidthFront = default(double?), double? limitsTreadwidthRearMin = default(double?), double? limitsTreadwidthRearMax = default(double?), bool? passfailsTreadwidthRear = default(bool?), double? resultsTreadwidthRear = default(double?), double? limitsWheelbaseLeftMin = default(double?), double? limitsWheelbaseLeftMax = default(double?), bool? passfailsWheelbaseLeft = default(bool?), double? resultsWheelbaseLeft = default(double?), double? limitsWheelbaseRightMin = default(double?), double? limitsWheelbaseRightMax = default(double?), bool? passfailsWheelbaseRight = default(bool?), double? resultsWheelbaseRight = default(double?), double? limitsToeLrMin = default(double?), double? limitsToeLrMax = default(double?), bool? passfailsToeLr = default(bool?), double? resultsToeLr = default(double?), double? limitsToeRrMin = default(double?), double? limitsToeRrMax = default(double?), bool? passfailsToeRr = default(bool?), double? resultsToeRr = default(double?), DateTimeOffset? inspectionDate = default(DateTimeOffset?))
        {
            this.VehicleNumber = vehicleNumber;
            this.Chassis = chassis;
            this.LimitsBodyoffsetMin = limitsBodyoffsetMin;
            this.LimitsBodyoffsetMax = limitsBodyoffsetMax;
            this.PassfailsBodyoffset = passfailsBodyoffset;
            this.ResultsBodyoffset = resultsBodyoffset;
            this.LimitsCamberLfMin = limitsCamberLfMin;
            this.LimitsCamberLfMax = limitsCamberLfMax;
            this.PassfailsCamberLf = passfailsCamberLf;
            this.ResultsCamberLf = resultsCamberLf;
            this.LimitsCamberLrMin = limitsCamberLrMin;
            this.LimitsCamberLrMax = limitsCamberLrMax;
            this.PassfailsCamberLr = passfailsCamberLr;
            this.ResultsCamberLr = resultsCamberLr;
            this.LimitsCamberRfMin = limitsCamberRfMin;
            this.LimitsCamberRfMax = limitsCamberRfMax;
            this.PassfailsCamberRf = passfailsCamberRf;
            this.ResultsCamberRf = resultsCamberRf;
            this.LimitsCamberRrMin = limitsCamberRrMin;
            this.LimitsCamberRrMax = limitsCamberRrMax;
            this.PassfailsCamberRr = passfailsCamberRr;
            this.ResultsCamberRr = resultsCamberRr;
            this.LimitsLfFramerailMin = limitsLfFramerailMin;
            this.LimitsLfFramerailMax = limitsLfFramerailMax;
            this.PassfailsLfFramerail = passfailsLfFramerail;
            this.ResultsLfFramerail = resultsLfFramerail;
            this.LimitsLrFramerailMin = limitsLrFramerailMin;
            this.LimitsLrFramerailMax = limitsLrFramerailMax;
            this.PassfailsLrFramerail = passfailsLrFramerail;
            this.ResultsLrFramerail = resultsLrFramerail;
            this.LimitsRfFramerailMin = limitsRfFramerailMin;
            this.LimitsRfFramerailMax = limitsRfFramerailMax;
            this.PassfailsRfFramerail = passfailsRfFramerail;
            this.ResultsRfFramerail = resultsRfFramerail;
            this.LimitsRhLocationLeftMin = limitsRhLocationLeftMin;
            this.LimitsRhLocationLeftMax = limitsRhLocationLeftMax;
            this.PassfailsRhLocationLeft = passfailsRhLocationLeft;
            this.ResultsRhLocationLeft = resultsRhLocationLeft;
            this.LimitsRhLocationRightMin = limitsRhLocationRightMin;
            this.LimitsRhLocationRightMax = limitsRhLocationRightMax;
            this.PassfailsRhLocationRight = passfailsRhLocationRight;
            this.ResultsRhLocationRight = resultsRhLocationRight;
            this.LimitsRhSkewMin = limitsRhSkewMin;
            this.LimitsRhSkewMax = limitsRhSkewMax;
            this.PassfailsRhSkew = passfailsRhSkew;
            this.ResultsRhSkew = resultsRhSkew;
            this.LimitsRrFramerailMin = limitsRrFramerailMin;
            this.LimitsRrFramerailMax = limitsRrFramerailMax;
            this.PassfailsRrFramerail = passfailsRrFramerail;
            this.ResultsRrFramerail = resultsRrFramerail;
            this.LimitsRightParallelMin = limitsRightParallelMin;
            this.LimitsRightParallelMax = limitsRightParallelMax;
            this.PassfailsRightParallel = passfailsRightParallel;
            this.ResultsRightParallel = resultsRightParallel;
            this.LimitsTreadwidthFrontMin = limitsTreadwidthFrontMin;
            this.LimitsTreadwidthFrontMax = limitsTreadwidthFrontMax;
            this.PassfailsTreadwidthFront = passfailsTreadwidthFront;
            this.ResultsTreadwidthFront = resultsTreadwidthFront;
            this.LimitsTreadwidthRearMin = limitsTreadwidthRearMin;
            this.LimitsTreadwidthRearMax = limitsTreadwidthRearMax;
            this.PassfailsTreadwidthRear = passfailsTreadwidthRear;
            this.ResultsTreadwidthRear = resultsTreadwidthRear;
            this.LimitsWheelbaseLeftMin = limitsWheelbaseLeftMin;
            this.LimitsWheelbaseLeftMax = limitsWheelbaseLeftMax;
            this.PassfailsWheelbaseLeft = passfailsWheelbaseLeft;
            this.ResultsWheelbaseLeft = resultsWheelbaseLeft;
            this.LimitsWheelbaseRightMin = limitsWheelbaseRightMin;
            this.LimitsWheelbaseRightMax = limitsWheelbaseRightMax;
            this.PassfailsWheelbaseRight = passfailsWheelbaseRight;
            this.ResultsWheelbaseRight = resultsWheelbaseRight;
            this.LimitsToeLrMin = limitsToeLrMin;
            this.LimitsToeLrMax = limitsToeLrMax;
            this.PassfailsToeLr = passfailsToeLr;
            this.ResultsToeLr = resultsToeLr;
            this.LimitsToeRrMin = limitsToeRrMin;
            this.LimitsToeRrMax = limitsToeRrMax;
            this.PassfailsToeRr = passfailsToeRr;
            this.ResultsToeRr = resultsToeRr;
            this.InspectionDate = inspectionDate;
        }
        
        /// <summary>
        /// Vehicle number
        /// </summary>
        /// <value>Vehicle number</value>
        [DataMember(Name="vehicle_number", EmitDefaultValue=false)]
        public string VehicleNumber { get; set; }

        /// <summary>
        /// Chassis
        /// </summary>
        /// <value>Chassis</value>
        [DataMember(Name="chassis", EmitDefaultValue=false)]
        public string Chassis { get; set; }

        /// <summary>
        /// Body offset minimum
        /// </summary>
        /// <value>Body offset minimum</value>
        [DataMember(Name="limits_bodyoffset_min", EmitDefaultValue=false)]
        public double? LimitsBodyoffsetMin { get; set; }

        /// <summary>
        /// Body offset maximum
        /// </summary>
        /// <value>Body offset maximum</value>
        [DataMember(Name="limits_bodyoffset_max", EmitDefaultValue=false)]
        public double? LimitsBodyoffsetMax { get; set; }

        /// <summary>
        /// Body offset pass/fails
        /// </summary>
        /// <value>Body offset pass/fails</value>
        [DataMember(Name="passfails_bodyoffset", EmitDefaultValue=false)]
        public bool? PassfailsBodyoffset { get; set; }

        /// <summary>
        /// Results body offset
        /// </summary>
        /// <value>Results body offset</value>
        [DataMember(Name="results_bodyoffset", EmitDefaultValue=false)]
        public double? ResultsBodyoffset { get; set; }

        /// <summary>
        /// Left front camber minimum
        /// </summary>
        /// <value>Left front camber minimum</value>
        [DataMember(Name="limits_camber_lf_min", EmitDefaultValue=false)]
        public double? LimitsCamberLfMin { get; set; }

        /// <summary>
        /// Left front camber maximum
        /// </summary>
        /// <value>Left front camber maximum</value>
        [DataMember(Name="limits_camber_lf_max", EmitDefaultValue=false)]
        public double? LimitsCamberLfMax { get; set; }

        /// <summary>
        /// Left front camber pass/fails
        /// </summary>
        /// <value>Left front camber pass/fails</value>
        [DataMember(Name="passfails_camber_lf", EmitDefaultValue=false)]
        public bool? PassfailsCamberLf { get; set; }

        /// <summary>
        /// Left front camber results
        /// </summary>
        /// <value>Left front camber results</value>
        [DataMember(Name="results_camber_lf", EmitDefaultValue=false)]
        public double? ResultsCamberLf { get; set; }

        /// <summary>
        /// Left rear camber minimum
        /// </summary>
        /// <value>Left rear camber minimum</value>
        [DataMember(Name="limits_camber_lr_min", EmitDefaultValue=false)]
        public double? LimitsCamberLrMin { get; set; }

        /// <summary>
        /// Left rear camber maximum
        /// </summary>
        /// <value>Left rear camber maximum</value>
        [DataMember(Name="limits_camber_lr_max", EmitDefaultValue=false)]
        public double? LimitsCamberLrMax { get; set; }

        /// <summary>
        /// Left rear camber pass/fails
        /// </summary>
        /// <value>Left rear camber pass/fails</value>
        [DataMember(Name="passfails_camber_lr", EmitDefaultValue=false)]
        public bool? PassfailsCamberLr { get; set; }

        /// <summary>
        /// Left rear camber results
        /// </summary>
        /// <value>Left rear camber results</value>
        [DataMember(Name="results_camber_lr", EmitDefaultValue=false)]
        public double? ResultsCamberLr { get; set; }

        /// <summary>
        /// Right front camber minimum
        /// </summary>
        /// <value>Right front camber minimum</value>
        [DataMember(Name="limits_camber_rf_min", EmitDefaultValue=false)]
        public double? LimitsCamberRfMin { get; set; }

        /// <summary>
        /// Right front camber maximum
        /// </summary>
        /// <value>Right front camber maximum</value>
        [DataMember(Name="limits_camber_rf_max", EmitDefaultValue=false)]
        public double? LimitsCamberRfMax { get; set; }

        /// <summary>
        /// Right front camber pass/fails
        /// </summary>
        /// <value>Right front camber pass/fails</value>
        [DataMember(Name="passfails_camber_rf", EmitDefaultValue=false)]
        public bool? PassfailsCamberRf { get; set; }

        /// <summary>
        /// Right front camber results
        /// </summary>
        /// <value>Right front camber results</value>
        [DataMember(Name="results_camber_rf", EmitDefaultValue=false)]
        public double? ResultsCamberRf { get; set; }

        /// <summary>
        /// Right rear camber minimum
        /// </summary>
        /// <value>Right rear camber minimum</value>
        [DataMember(Name="limits_camber_rr_min", EmitDefaultValue=false)]
        public double? LimitsCamberRrMin { get; set; }

        /// <summary>
        /// Right rear camber maximum
        /// </summary>
        /// <value>Right rear camber maximum</value>
        [DataMember(Name="limits_camber_rr_max", EmitDefaultValue=false)]
        public double? LimitsCamberRrMax { get; set; }

        /// <summary>
        /// Right rear camber pass/fails
        /// </summary>
        /// <value>Right rear camber pass/fails</value>
        [DataMember(Name="passfails_camber_rr", EmitDefaultValue=false)]
        public bool? PassfailsCamberRr { get; set; }

        /// <summary>
        /// Right rear camber results
        /// </summary>
        /// <value>Right rear camber results</value>
        [DataMember(Name="results_camber_rr", EmitDefaultValue=false)]
        public double? ResultsCamberRr { get; set; }

        /// <summary>
        /// Left front framerail minimum
        /// </summary>
        /// <value>Left front framerail minimum</value>
        [DataMember(Name="limits_lf_framerail_min", EmitDefaultValue=false)]
        public double? LimitsLfFramerailMin { get; set; }

        /// <summary>
        /// Left front framework maximum
        /// </summary>
        /// <value>Left front framework maximum</value>
        [DataMember(Name="limits_lf_framerail_max", EmitDefaultValue=false)]
        public double? LimitsLfFramerailMax { get; set; }

        /// <summary>
        /// Left front framerail pass/fails
        /// </summary>
        /// <value>Left front framerail pass/fails</value>
        [DataMember(Name="passfails_lf_framerail", EmitDefaultValue=false)]
        public bool? PassfailsLfFramerail { get; set; }

        /// <summary>
        /// Left front framework results
        /// </summary>
        /// <value>Left front framework results</value>
        [DataMember(Name="results_lf_framerail", EmitDefaultValue=false)]
        public double? ResultsLfFramerail { get; set; }

        /// <summary>
        /// Left rear framerail minimum
        /// </summary>
        /// <value>Left rear framerail minimum</value>
        [DataMember(Name="limits_lr_framerail_min", EmitDefaultValue=false)]
        public double? LimitsLrFramerailMin { get; set; }

        /// <summary>
        /// Left rear framerail maximum
        /// </summary>
        /// <value>Left rear framerail maximum</value>
        [DataMember(Name="limits_lr_framerail_max", EmitDefaultValue=false)]
        public double? LimitsLrFramerailMax { get; set; }

        /// <summary>
        /// Left rear framerail pass/fails
        /// </summary>
        /// <value>Left rear framerail pass/fails</value>
        [DataMember(Name="passfails_lr_framerail", EmitDefaultValue=false)]
        public bool? PassfailsLrFramerail { get; set; }

        /// <summary>
        /// Left rear framerail results
        /// </summary>
        /// <value>Left rear framerail results</value>
        [DataMember(Name="results_lr_framerail", EmitDefaultValue=false)]
        public double? ResultsLrFramerail { get; set; }

        /// <summary>
        /// Right front framerail minimum
        /// </summary>
        /// <value>Right front framerail minimum</value>
        [DataMember(Name="limits_rf_framerail_min", EmitDefaultValue=false)]
        public double? LimitsRfFramerailMin { get; set; }

        /// <summary>
        /// Right front framerail maximum
        /// </summary>
        /// <value>Right front framerail maximum</value>
        [DataMember(Name="limits_rf_framerail_max", EmitDefaultValue=false)]
        public double? LimitsRfFramerailMax { get; set; }

        /// <summary>
        /// Right front framerail pass/fails
        /// </summary>
        /// <value>Right front framerail pass/fails</value>
        [DataMember(Name="passfails_rf_framerail", EmitDefaultValue=false)]
        public bool? PassfailsRfFramerail { get; set; }

        /// <summary>
        /// Right front framerail results
        /// </summary>
        /// <value>Right front framerail results</value>
        [DataMember(Name="results_rf_framerail", EmitDefaultValue=false)]
        public double? ResultsRfFramerail { get; set; }

        /// <summary>
        /// Right hand left minimum
        /// </summary>
        /// <value>Right hand left minimum</value>
        [DataMember(Name="limits_rh_location_left_min", EmitDefaultValue=false)]
        public double? LimitsRhLocationLeftMin { get; set; }

        /// <summary>
        /// Right hand left maximum
        /// </summary>
        /// <value>Right hand left maximum</value>
        [DataMember(Name="limits_rh_location_left_max", EmitDefaultValue=false)]
        public double? LimitsRhLocationLeftMax { get; set; }

        /// <summary>
        /// Right hand left pass/fails
        /// </summary>
        /// <value>Right hand left pass/fails</value>
        [DataMember(Name="passfails_rh_location_left", EmitDefaultValue=false)]
        public bool? PassfailsRhLocationLeft { get; set; }

        /// <summary>
        /// Right hand left results
        /// </summary>
        /// <value>Right hand left results</value>
        [DataMember(Name="results_rh_location_left", EmitDefaultValue=false)]
        public double? ResultsRhLocationLeft { get; set; }

        /// <summary>
        /// Right hand right min
        /// </summary>
        /// <value>Right hand right min</value>
        [DataMember(Name="limits_rh_location_right_min", EmitDefaultValue=false)]
        public double? LimitsRhLocationRightMin { get; set; }

        /// <summary>
        /// Right hand right max
        /// </summary>
        /// <value>Right hand right max</value>
        [DataMember(Name="limits_rh_location_right_max", EmitDefaultValue=false)]
        public double? LimitsRhLocationRightMax { get; set; }

        /// <summary>
        /// Right hand right pass/fails
        /// </summary>
        /// <value>Right hand right pass/fails</value>
        [DataMember(Name="passfails_rh_location_right", EmitDefaultValue=false)]
        public bool? PassfailsRhLocationRight { get; set; }

        /// <summary>
        /// Right hand right results
        /// </summary>
        /// <value>Right hand right results</value>
        [DataMember(Name="results_rh_location_right", EmitDefaultValue=false)]
        public double? ResultsRhLocationRight { get; set; }

        /// <summary>
        /// Right right skew minimum
        /// </summary>
        /// <value>Right right skew minimum</value>
        [DataMember(Name="limits_rh_skew_min", EmitDefaultValue=false)]
        public double? LimitsRhSkewMin { get; set; }

        /// <summary>
        /// Right hand skew maximum
        /// </summary>
        /// <value>Right hand skew maximum</value>
        [DataMember(Name="limits_rh_skew_max", EmitDefaultValue=false)]
        public double? LimitsRhSkewMax { get; set; }

        /// <summary>
        /// Right hand skew pass/fails
        /// </summary>
        /// <value>Right hand skew pass/fails</value>
        [DataMember(Name="passfails_rh_skew", EmitDefaultValue=false)]
        public bool? PassfailsRhSkew { get; set; }

        /// <summary>
        /// Right hand skew results
        /// </summary>
        /// <value>Right hand skew results</value>
        [DataMember(Name="results_rh_skew", EmitDefaultValue=false)]
        public double? ResultsRhSkew { get; set; }

        /// <summary>
        /// Right rear framerail minimum
        /// </summary>
        /// <value>Right rear framerail minimum</value>
        [DataMember(Name="limits_rr_framerail_min", EmitDefaultValue=false)]
        public double? LimitsRrFramerailMin { get; set; }

        /// <summary>
        /// Right rear framerail maximum
        /// </summary>
        /// <value>Right rear framerail maximum</value>
        [DataMember(Name="limits_rr_framerail_max", EmitDefaultValue=false)]
        public double? LimitsRrFramerailMax { get; set; }

        /// <summary>
        /// Right rear framerail pass/fails
        /// </summary>
        /// <value>Right rear framerail pass/fails</value>
        [DataMember(Name="passfails_rr_framerail", EmitDefaultValue=false)]
        public bool? PassfailsRrFramerail { get; set; }

        /// <summary>
        /// Right rear framerail results
        /// </summary>
        /// <value>Right rear framerail results</value>
        [DataMember(Name="results_rr_framerail", EmitDefaultValue=false)]
        public double? ResultsRrFramerail { get; set; }

        /// <summary>
        /// Right parallel minimum
        /// </summary>
        /// <value>Right parallel minimum</value>
        [DataMember(Name="limits_right_parallel_min", EmitDefaultValue=false)]
        public double? LimitsRightParallelMin { get; set; }

        /// <summary>
        /// Right parallel maximum
        /// </summary>
        /// <value>Right parallel maximum</value>
        [DataMember(Name="limits_right_parallel_max", EmitDefaultValue=false)]
        public double? LimitsRightParallelMax { get; set; }

        /// <summary>
        /// Right parallel pass/fails
        /// </summary>
        /// <value>Right parallel pass/fails</value>
        [DataMember(Name="passfails_right_parallel", EmitDefaultValue=false)]
        public bool? PassfailsRightParallel { get; set; }

        /// <summary>
        /// Right parallel results
        /// </summary>
        /// <value>Right parallel results</value>
        [DataMember(Name="results_right_parallel", EmitDefaultValue=false)]
        public double? ResultsRightParallel { get; set; }

        /// <summary>
        /// Front treadwidth minimum
        /// </summary>
        /// <value>Front treadwidth minimum</value>
        [DataMember(Name="limits_treadwidth_front_min", EmitDefaultValue=false)]
        public double? LimitsTreadwidthFrontMin { get; set; }

        /// <summary>
        /// Front treadwidth maximum
        /// </summary>
        /// <value>Front treadwidth maximum</value>
        [DataMember(Name="limits_treadwidth_front_max", EmitDefaultValue=false)]
        public double? LimitsTreadwidthFrontMax { get; set; }

        /// <summary>
        /// Front treadwidth pass/fails
        /// </summary>
        /// <value>Front treadwidth pass/fails</value>
        [DataMember(Name="passfails_treadwidth_front", EmitDefaultValue=false)]
        public bool? PassfailsTreadwidthFront { get; set; }

        /// <summary>
        /// Front treadwidth results
        /// </summary>
        /// <value>Front treadwidth results</value>
        [DataMember(Name="results_treadwidth_front", EmitDefaultValue=false)]
        public double? ResultsTreadwidthFront { get; set; }

        /// <summary>
        /// Rear treadwidth minimum
        /// </summary>
        /// <value>Rear treadwidth minimum</value>
        [DataMember(Name="limits_treadwidth_rear_min", EmitDefaultValue=false)]
        public double? LimitsTreadwidthRearMin { get; set; }

        /// <summary>
        /// Rear treadwidth maximum
        /// </summary>
        /// <value>Rear treadwidth maximum</value>
        [DataMember(Name="limits_treadwidth_rear_max", EmitDefaultValue=false)]
        public double? LimitsTreadwidthRearMax { get; set; }

        /// <summary>
        /// Rear treadwidth pass/fails
        /// </summary>
        /// <value>Rear treadwidth pass/fails</value>
        [DataMember(Name="passfails_treadwidth_rear", EmitDefaultValue=false)]
        public bool? PassfailsTreadwidthRear { get; set; }

        /// <summary>
        /// Rear treadwidth results
        /// </summary>
        /// <value>Rear treadwidth results</value>
        [DataMember(Name="results_treadwidth_rear", EmitDefaultValue=false)]
        public double? ResultsTreadwidthRear { get; set; }

        /// <summary>
        /// Left wheelbase minimum
        /// </summary>
        /// <value>Left wheelbase minimum</value>
        [DataMember(Name="limits_wheelbase_left_min", EmitDefaultValue=false)]
        public double? LimitsWheelbaseLeftMin { get; set; }

        /// <summary>
        /// Left wheelbase maximum
        /// </summary>
        /// <value>Left wheelbase maximum</value>
        [DataMember(Name="limits_wheelbase_left_max", EmitDefaultValue=false)]
        public double? LimitsWheelbaseLeftMax { get; set; }

        /// <summary>
        /// Left wheelbase pass/fails
        /// </summary>
        /// <value>Left wheelbase pass/fails</value>
        [DataMember(Name="passfails_wheelbase_left", EmitDefaultValue=false)]
        public bool? PassfailsWheelbaseLeft { get; set; }

        /// <summary>
        /// Left wheelbase results
        /// </summary>
        /// <value>Left wheelbase results</value>
        [DataMember(Name="results_wheelbase_left", EmitDefaultValue=false)]
        public double? ResultsWheelbaseLeft { get; set; }

        /// <summary>
        /// Right wheelbase minimum
        /// </summary>
        /// <value>Right wheelbase minimum</value>
        [DataMember(Name="limits_wheelbase_right_min", EmitDefaultValue=false)]
        public double? LimitsWheelbaseRightMin { get; set; }

        /// <summary>
        /// Right wheelbase maximum
        /// </summary>
        /// <value>Right wheelbase maximum</value>
        [DataMember(Name="limits_wheelbase_right_max", EmitDefaultValue=false)]
        public double? LimitsWheelbaseRightMax { get; set; }

        /// <summary>
        /// Right wheelbase pass/fails
        /// </summary>
        /// <value>Right wheelbase pass/fails</value>
        [DataMember(Name="passfails_wheelbase_right", EmitDefaultValue=false)]
        public bool? PassfailsWheelbaseRight { get; set; }

        /// <summary>
        /// Right wheelbase results
        /// </summary>
        /// <value>Right wheelbase results</value>
        [DataMember(Name="results_wheelbase_right", EmitDefaultValue=false)]
        public double? ResultsWheelbaseRight { get; set; }

        /// <summary>
        /// Left rear toe minimum
        /// </summary>
        /// <value>Left rear toe minimum</value>
        [DataMember(Name="limits_toe_lr_min", EmitDefaultValue=false)]
        public double? LimitsToeLrMin { get; set; }

        /// <summary>
        /// Left rear toe maximum
        /// </summary>
        /// <value>Left rear toe maximum</value>
        [DataMember(Name="limits_toe_lr_max", EmitDefaultValue=false)]
        public double? LimitsToeLrMax { get; set; }

        /// <summary>
        /// Left rear toe pass/fails
        /// </summary>
        /// <value>Left rear toe pass/fails</value>
        [DataMember(Name="passfails_toe_lr", EmitDefaultValue=false)]
        public bool? PassfailsToeLr { get; set; }

        /// <summary>
        /// Left rear toe results
        /// </summary>
        /// <value>Left rear toe results</value>
        [DataMember(Name="results_toe_lr", EmitDefaultValue=false)]
        public double? ResultsToeLr { get; set; }

        /// <summary>
        /// Right rear toe minimum
        /// </summary>
        /// <value>Right rear toe minimum</value>
        [DataMember(Name="limits_toe_rr_min", EmitDefaultValue=false)]
        public double? LimitsToeRrMin { get; set; }

        /// <summary>
        /// Right rear toe maximum
        /// </summary>
        /// <value>Right rear toe maximum</value>
        [DataMember(Name="limits_toe_rr_max", EmitDefaultValue=false)]
        public double? LimitsToeRrMax { get; set; }

        /// <summary>
        /// Right rear pass/fails
        /// </summary>
        /// <value>Right rear pass/fails</value>
        [DataMember(Name="passfails_toe_rr", EmitDefaultValue=false)]
        public bool? PassfailsToeRr { get; set; }

        /// <summary>
        /// Right rear toe results
        /// </summary>
        /// <value>Right rear toe results</value>
        [DataMember(Name="results_toe_rr", EmitDefaultValue=false)]
        public double? ResultsToeRr { get; set; }

        /// <summary>
        /// Inspection date
        /// </summary>
        /// <value>Inspection date</value>
        [DataMember(Name="inspection_date", EmitDefaultValue=false)]
        public DateTimeOffset? InspectionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OSSScan {\n");
            sb.Append("  VehicleNumber: ").Append(VehicleNumber).Append("\n");
            sb.Append("  Chassis: ").Append(Chassis).Append("\n");
            sb.Append("  LimitsBodyoffsetMin: ").Append(LimitsBodyoffsetMin).Append("\n");
            sb.Append("  LimitsBodyoffsetMax: ").Append(LimitsBodyoffsetMax).Append("\n");
            sb.Append("  PassfailsBodyoffset: ").Append(PassfailsBodyoffset).Append("\n");
            sb.Append("  ResultsBodyoffset: ").Append(ResultsBodyoffset).Append("\n");
            sb.Append("  LimitsCamberLfMin: ").Append(LimitsCamberLfMin).Append("\n");
            sb.Append("  LimitsCamberLfMax: ").Append(LimitsCamberLfMax).Append("\n");
            sb.Append("  PassfailsCamberLf: ").Append(PassfailsCamberLf).Append("\n");
            sb.Append("  ResultsCamberLf: ").Append(ResultsCamberLf).Append("\n");
            sb.Append("  LimitsCamberLrMin: ").Append(LimitsCamberLrMin).Append("\n");
            sb.Append("  LimitsCamberLrMax: ").Append(LimitsCamberLrMax).Append("\n");
            sb.Append("  PassfailsCamberLr: ").Append(PassfailsCamberLr).Append("\n");
            sb.Append("  ResultsCamberLr: ").Append(ResultsCamberLr).Append("\n");
            sb.Append("  LimitsCamberRfMin: ").Append(LimitsCamberRfMin).Append("\n");
            sb.Append("  LimitsCamberRfMax: ").Append(LimitsCamberRfMax).Append("\n");
            sb.Append("  PassfailsCamberRf: ").Append(PassfailsCamberRf).Append("\n");
            sb.Append("  ResultsCamberRf: ").Append(ResultsCamberRf).Append("\n");
            sb.Append("  LimitsCamberRrMin: ").Append(LimitsCamberRrMin).Append("\n");
            sb.Append("  LimitsCamberRrMax: ").Append(LimitsCamberRrMax).Append("\n");
            sb.Append("  PassfailsCamberRr: ").Append(PassfailsCamberRr).Append("\n");
            sb.Append("  ResultsCamberRr: ").Append(ResultsCamberRr).Append("\n");
            sb.Append("  LimitsLfFramerailMin: ").Append(LimitsLfFramerailMin).Append("\n");
            sb.Append("  LimitsLfFramerailMax: ").Append(LimitsLfFramerailMax).Append("\n");
            sb.Append("  PassfailsLfFramerail: ").Append(PassfailsLfFramerail).Append("\n");
            sb.Append("  ResultsLfFramerail: ").Append(ResultsLfFramerail).Append("\n");
            sb.Append("  LimitsLrFramerailMin: ").Append(LimitsLrFramerailMin).Append("\n");
            sb.Append("  LimitsLrFramerailMax: ").Append(LimitsLrFramerailMax).Append("\n");
            sb.Append("  PassfailsLrFramerail: ").Append(PassfailsLrFramerail).Append("\n");
            sb.Append("  ResultsLrFramerail: ").Append(ResultsLrFramerail).Append("\n");
            sb.Append("  LimitsRfFramerailMin: ").Append(LimitsRfFramerailMin).Append("\n");
            sb.Append("  LimitsRfFramerailMax: ").Append(LimitsRfFramerailMax).Append("\n");
            sb.Append("  PassfailsRfFramerail: ").Append(PassfailsRfFramerail).Append("\n");
            sb.Append("  ResultsRfFramerail: ").Append(ResultsRfFramerail).Append("\n");
            sb.Append("  LimitsRhLocationLeftMin: ").Append(LimitsRhLocationLeftMin).Append("\n");
            sb.Append("  LimitsRhLocationLeftMax: ").Append(LimitsRhLocationLeftMax).Append("\n");
            sb.Append("  PassfailsRhLocationLeft: ").Append(PassfailsRhLocationLeft).Append("\n");
            sb.Append("  ResultsRhLocationLeft: ").Append(ResultsRhLocationLeft).Append("\n");
            sb.Append("  LimitsRhLocationRightMin: ").Append(LimitsRhLocationRightMin).Append("\n");
            sb.Append("  LimitsRhLocationRightMax: ").Append(LimitsRhLocationRightMax).Append("\n");
            sb.Append("  PassfailsRhLocationRight: ").Append(PassfailsRhLocationRight).Append("\n");
            sb.Append("  ResultsRhLocationRight: ").Append(ResultsRhLocationRight).Append("\n");
            sb.Append("  LimitsRhSkewMin: ").Append(LimitsRhSkewMin).Append("\n");
            sb.Append("  LimitsRhSkewMax: ").Append(LimitsRhSkewMax).Append("\n");
            sb.Append("  PassfailsRhSkew: ").Append(PassfailsRhSkew).Append("\n");
            sb.Append("  ResultsRhSkew: ").Append(ResultsRhSkew).Append("\n");
            sb.Append("  LimitsRrFramerailMin: ").Append(LimitsRrFramerailMin).Append("\n");
            sb.Append("  LimitsRrFramerailMax: ").Append(LimitsRrFramerailMax).Append("\n");
            sb.Append("  PassfailsRrFramerail: ").Append(PassfailsRrFramerail).Append("\n");
            sb.Append("  ResultsRrFramerail: ").Append(ResultsRrFramerail).Append("\n");
            sb.Append("  LimitsRightParallelMin: ").Append(LimitsRightParallelMin).Append("\n");
            sb.Append("  LimitsRightParallelMax: ").Append(LimitsRightParallelMax).Append("\n");
            sb.Append("  PassfailsRightParallel: ").Append(PassfailsRightParallel).Append("\n");
            sb.Append("  ResultsRightParallel: ").Append(ResultsRightParallel).Append("\n");
            sb.Append("  LimitsTreadwidthFrontMin: ").Append(LimitsTreadwidthFrontMin).Append("\n");
            sb.Append("  LimitsTreadwidthFrontMax: ").Append(LimitsTreadwidthFrontMax).Append("\n");
            sb.Append("  PassfailsTreadwidthFront: ").Append(PassfailsTreadwidthFront).Append("\n");
            sb.Append("  ResultsTreadwidthFront: ").Append(ResultsTreadwidthFront).Append("\n");
            sb.Append("  LimitsTreadwidthRearMin: ").Append(LimitsTreadwidthRearMin).Append("\n");
            sb.Append("  LimitsTreadwidthRearMax: ").Append(LimitsTreadwidthRearMax).Append("\n");
            sb.Append("  PassfailsTreadwidthRear: ").Append(PassfailsTreadwidthRear).Append("\n");
            sb.Append("  ResultsTreadwidthRear: ").Append(ResultsTreadwidthRear).Append("\n");
            sb.Append("  LimitsWheelbaseLeftMin: ").Append(LimitsWheelbaseLeftMin).Append("\n");
            sb.Append("  LimitsWheelbaseLeftMax: ").Append(LimitsWheelbaseLeftMax).Append("\n");
            sb.Append("  PassfailsWheelbaseLeft: ").Append(PassfailsWheelbaseLeft).Append("\n");
            sb.Append("  ResultsWheelbaseLeft: ").Append(ResultsWheelbaseLeft).Append("\n");
            sb.Append("  LimitsWheelbaseRightMin: ").Append(LimitsWheelbaseRightMin).Append("\n");
            sb.Append("  LimitsWheelbaseRightMax: ").Append(LimitsWheelbaseRightMax).Append("\n");
            sb.Append("  PassfailsWheelbaseRight: ").Append(PassfailsWheelbaseRight).Append("\n");
            sb.Append("  ResultsWheelbaseRight: ").Append(ResultsWheelbaseRight).Append("\n");
            sb.Append("  LimitsToeLrMin: ").Append(LimitsToeLrMin).Append("\n");
            sb.Append("  LimitsToeLrMax: ").Append(LimitsToeLrMax).Append("\n");
            sb.Append("  PassfailsToeLr: ").Append(PassfailsToeLr).Append("\n");
            sb.Append("  ResultsToeLr: ").Append(ResultsToeLr).Append("\n");
            sb.Append("  LimitsToeRrMin: ").Append(LimitsToeRrMin).Append("\n");
            sb.Append("  LimitsToeRrMax: ").Append(LimitsToeRrMax).Append("\n");
            sb.Append("  PassfailsToeRr: ").Append(PassfailsToeRr).Append("\n");
            sb.Append("  ResultsToeRr: ").Append(ResultsToeRr).Append("\n");
            sb.Append("  InspectionDate: ").Append(InspectionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OSSScan);
        }

        /// <summary>
        /// Returns true if OSSScan instances are equal
        /// </summary>
        /// <param name="input">Instance of OSSScan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OSSScan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VehicleNumber == input.VehicleNumber ||
                    (this.VehicleNumber != null &&
                    this.VehicleNumber.Equals(input.VehicleNumber))
                ) && 
                (
                    this.Chassis == input.Chassis ||
                    (this.Chassis != null &&
                    this.Chassis.Equals(input.Chassis))
                ) && 
                (
                    this.LimitsBodyoffsetMin == input.LimitsBodyoffsetMin ||
                    (this.LimitsBodyoffsetMin != null &&
                    this.LimitsBodyoffsetMin.Equals(input.LimitsBodyoffsetMin))
                ) && 
                (
                    this.LimitsBodyoffsetMax == input.LimitsBodyoffsetMax ||
                    (this.LimitsBodyoffsetMax != null &&
                    this.LimitsBodyoffsetMax.Equals(input.LimitsBodyoffsetMax))
                ) && 
                (
                    this.PassfailsBodyoffset == input.PassfailsBodyoffset ||
                    (this.PassfailsBodyoffset != null &&
                    this.PassfailsBodyoffset.Equals(input.PassfailsBodyoffset))
                ) && 
                (
                    this.ResultsBodyoffset == input.ResultsBodyoffset ||
                    (this.ResultsBodyoffset != null &&
                    this.ResultsBodyoffset.Equals(input.ResultsBodyoffset))
                ) && 
                (
                    this.LimitsCamberLfMin == input.LimitsCamberLfMin ||
                    (this.LimitsCamberLfMin != null &&
                    this.LimitsCamberLfMin.Equals(input.LimitsCamberLfMin))
                ) && 
                (
                    this.LimitsCamberLfMax == input.LimitsCamberLfMax ||
                    (this.LimitsCamberLfMax != null &&
                    this.LimitsCamberLfMax.Equals(input.LimitsCamberLfMax))
                ) && 
                (
                    this.PassfailsCamberLf == input.PassfailsCamberLf ||
                    (this.PassfailsCamberLf != null &&
                    this.PassfailsCamberLf.Equals(input.PassfailsCamberLf))
                ) && 
                (
                    this.ResultsCamberLf == input.ResultsCamberLf ||
                    (this.ResultsCamberLf != null &&
                    this.ResultsCamberLf.Equals(input.ResultsCamberLf))
                ) && 
                (
                    this.LimitsCamberLrMin == input.LimitsCamberLrMin ||
                    (this.LimitsCamberLrMin != null &&
                    this.LimitsCamberLrMin.Equals(input.LimitsCamberLrMin))
                ) && 
                (
                    this.LimitsCamberLrMax == input.LimitsCamberLrMax ||
                    (this.LimitsCamberLrMax != null &&
                    this.LimitsCamberLrMax.Equals(input.LimitsCamberLrMax))
                ) && 
                (
                    this.PassfailsCamberLr == input.PassfailsCamberLr ||
                    (this.PassfailsCamberLr != null &&
                    this.PassfailsCamberLr.Equals(input.PassfailsCamberLr))
                ) && 
                (
                    this.ResultsCamberLr == input.ResultsCamberLr ||
                    (this.ResultsCamberLr != null &&
                    this.ResultsCamberLr.Equals(input.ResultsCamberLr))
                ) && 
                (
                    this.LimitsCamberRfMin == input.LimitsCamberRfMin ||
                    (this.LimitsCamberRfMin != null &&
                    this.LimitsCamberRfMin.Equals(input.LimitsCamberRfMin))
                ) && 
                (
                    this.LimitsCamberRfMax == input.LimitsCamberRfMax ||
                    (this.LimitsCamberRfMax != null &&
                    this.LimitsCamberRfMax.Equals(input.LimitsCamberRfMax))
                ) && 
                (
                    this.PassfailsCamberRf == input.PassfailsCamberRf ||
                    (this.PassfailsCamberRf != null &&
                    this.PassfailsCamberRf.Equals(input.PassfailsCamberRf))
                ) && 
                (
                    this.ResultsCamberRf == input.ResultsCamberRf ||
                    (this.ResultsCamberRf != null &&
                    this.ResultsCamberRf.Equals(input.ResultsCamberRf))
                ) && 
                (
                    this.LimitsCamberRrMin == input.LimitsCamberRrMin ||
                    (this.LimitsCamberRrMin != null &&
                    this.LimitsCamberRrMin.Equals(input.LimitsCamberRrMin))
                ) && 
                (
                    this.LimitsCamberRrMax == input.LimitsCamberRrMax ||
                    (this.LimitsCamberRrMax != null &&
                    this.LimitsCamberRrMax.Equals(input.LimitsCamberRrMax))
                ) && 
                (
                    this.PassfailsCamberRr == input.PassfailsCamberRr ||
                    (this.PassfailsCamberRr != null &&
                    this.PassfailsCamberRr.Equals(input.PassfailsCamberRr))
                ) && 
                (
                    this.ResultsCamberRr == input.ResultsCamberRr ||
                    (this.ResultsCamberRr != null &&
                    this.ResultsCamberRr.Equals(input.ResultsCamberRr))
                ) && 
                (
                    this.LimitsLfFramerailMin == input.LimitsLfFramerailMin ||
                    (this.LimitsLfFramerailMin != null &&
                    this.LimitsLfFramerailMin.Equals(input.LimitsLfFramerailMin))
                ) && 
                (
                    this.LimitsLfFramerailMax == input.LimitsLfFramerailMax ||
                    (this.LimitsLfFramerailMax != null &&
                    this.LimitsLfFramerailMax.Equals(input.LimitsLfFramerailMax))
                ) && 
                (
                    this.PassfailsLfFramerail == input.PassfailsLfFramerail ||
                    (this.PassfailsLfFramerail != null &&
                    this.PassfailsLfFramerail.Equals(input.PassfailsLfFramerail))
                ) && 
                (
                    this.ResultsLfFramerail == input.ResultsLfFramerail ||
                    (this.ResultsLfFramerail != null &&
                    this.ResultsLfFramerail.Equals(input.ResultsLfFramerail))
                ) && 
                (
                    this.LimitsLrFramerailMin == input.LimitsLrFramerailMin ||
                    (this.LimitsLrFramerailMin != null &&
                    this.LimitsLrFramerailMin.Equals(input.LimitsLrFramerailMin))
                ) && 
                (
                    this.LimitsLrFramerailMax == input.LimitsLrFramerailMax ||
                    (this.LimitsLrFramerailMax != null &&
                    this.LimitsLrFramerailMax.Equals(input.LimitsLrFramerailMax))
                ) && 
                (
                    this.PassfailsLrFramerail == input.PassfailsLrFramerail ||
                    (this.PassfailsLrFramerail != null &&
                    this.PassfailsLrFramerail.Equals(input.PassfailsLrFramerail))
                ) && 
                (
                    this.ResultsLrFramerail == input.ResultsLrFramerail ||
                    (this.ResultsLrFramerail != null &&
                    this.ResultsLrFramerail.Equals(input.ResultsLrFramerail))
                ) && 
                (
                    this.LimitsRfFramerailMin == input.LimitsRfFramerailMin ||
                    (this.LimitsRfFramerailMin != null &&
                    this.LimitsRfFramerailMin.Equals(input.LimitsRfFramerailMin))
                ) && 
                (
                    this.LimitsRfFramerailMax == input.LimitsRfFramerailMax ||
                    (this.LimitsRfFramerailMax != null &&
                    this.LimitsRfFramerailMax.Equals(input.LimitsRfFramerailMax))
                ) && 
                (
                    this.PassfailsRfFramerail == input.PassfailsRfFramerail ||
                    (this.PassfailsRfFramerail != null &&
                    this.PassfailsRfFramerail.Equals(input.PassfailsRfFramerail))
                ) && 
                (
                    this.ResultsRfFramerail == input.ResultsRfFramerail ||
                    (this.ResultsRfFramerail != null &&
                    this.ResultsRfFramerail.Equals(input.ResultsRfFramerail))
                ) && 
                (
                    this.LimitsRhLocationLeftMin == input.LimitsRhLocationLeftMin ||
                    (this.LimitsRhLocationLeftMin != null &&
                    this.LimitsRhLocationLeftMin.Equals(input.LimitsRhLocationLeftMin))
                ) && 
                (
                    this.LimitsRhLocationLeftMax == input.LimitsRhLocationLeftMax ||
                    (this.LimitsRhLocationLeftMax != null &&
                    this.LimitsRhLocationLeftMax.Equals(input.LimitsRhLocationLeftMax))
                ) && 
                (
                    this.PassfailsRhLocationLeft == input.PassfailsRhLocationLeft ||
                    (this.PassfailsRhLocationLeft != null &&
                    this.PassfailsRhLocationLeft.Equals(input.PassfailsRhLocationLeft))
                ) && 
                (
                    this.ResultsRhLocationLeft == input.ResultsRhLocationLeft ||
                    (this.ResultsRhLocationLeft != null &&
                    this.ResultsRhLocationLeft.Equals(input.ResultsRhLocationLeft))
                ) && 
                (
                    this.LimitsRhLocationRightMin == input.LimitsRhLocationRightMin ||
                    (this.LimitsRhLocationRightMin != null &&
                    this.LimitsRhLocationRightMin.Equals(input.LimitsRhLocationRightMin))
                ) && 
                (
                    this.LimitsRhLocationRightMax == input.LimitsRhLocationRightMax ||
                    (this.LimitsRhLocationRightMax != null &&
                    this.LimitsRhLocationRightMax.Equals(input.LimitsRhLocationRightMax))
                ) && 
                (
                    this.PassfailsRhLocationRight == input.PassfailsRhLocationRight ||
                    (this.PassfailsRhLocationRight != null &&
                    this.PassfailsRhLocationRight.Equals(input.PassfailsRhLocationRight))
                ) && 
                (
                    this.ResultsRhLocationRight == input.ResultsRhLocationRight ||
                    (this.ResultsRhLocationRight != null &&
                    this.ResultsRhLocationRight.Equals(input.ResultsRhLocationRight))
                ) && 
                (
                    this.LimitsRhSkewMin == input.LimitsRhSkewMin ||
                    (this.LimitsRhSkewMin != null &&
                    this.LimitsRhSkewMin.Equals(input.LimitsRhSkewMin))
                ) && 
                (
                    this.LimitsRhSkewMax == input.LimitsRhSkewMax ||
                    (this.LimitsRhSkewMax != null &&
                    this.LimitsRhSkewMax.Equals(input.LimitsRhSkewMax))
                ) && 
                (
                    this.PassfailsRhSkew == input.PassfailsRhSkew ||
                    (this.PassfailsRhSkew != null &&
                    this.PassfailsRhSkew.Equals(input.PassfailsRhSkew))
                ) && 
                (
                    this.ResultsRhSkew == input.ResultsRhSkew ||
                    (this.ResultsRhSkew != null &&
                    this.ResultsRhSkew.Equals(input.ResultsRhSkew))
                ) && 
                (
                    this.LimitsRrFramerailMin == input.LimitsRrFramerailMin ||
                    (this.LimitsRrFramerailMin != null &&
                    this.LimitsRrFramerailMin.Equals(input.LimitsRrFramerailMin))
                ) && 
                (
                    this.LimitsRrFramerailMax == input.LimitsRrFramerailMax ||
                    (this.LimitsRrFramerailMax != null &&
                    this.LimitsRrFramerailMax.Equals(input.LimitsRrFramerailMax))
                ) && 
                (
                    this.PassfailsRrFramerail == input.PassfailsRrFramerail ||
                    (this.PassfailsRrFramerail != null &&
                    this.PassfailsRrFramerail.Equals(input.PassfailsRrFramerail))
                ) && 
                (
                    this.ResultsRrFramerail == input.ResultsRrFramerail ||
                    (this.ResultsRrFramerail != null &&
                    this.ResultsRrFramerail.Equals(input.ResultsRrFramerail))
                ) && 
                (
                    this.LimitsRightParallelMin == input.LimitsRightParallelMin ||
                    (this.LimitsRightParallelMin != null &&
                    this.LimitsRightParallelMin.Equals(input.LimitsRightParallelMin))
                ) && 
                (
                    this.LimitsRightParallelMax == input.LimitsRightParallelMax ||
                    (this.LimitsRightParallelMax != null &&
                    this.LimitsRightParallelMax.Equals(input.LimitsRightParallelMax))
                ) && 
                (
                    this.PassfailsRightParallel == input.PassfailsRightParallel ||
                    (this.PassfailsRightParallel != null &&
                    this.PassfailsRightParallel.Equals(input.PassfailsRightParallel))
                ) && 
                (
                    this.ResultsRightParallel == input.ResultsRightParallel ||
                    (this.ResultsRightParallel != null &&
                    this.ResultsRightParallel.Equals(input.ResultsRightParallel))
                ) && 
                (
                    this.LimitsTreadwidthFrontMin == input.LimitsTreadwidthFrontMin ||
                    (this.LimitsTreadwidthFrontMin != null &&
                    this.LimitsTreadwidthFrontMin.Equals(input.LimitsTreadwidthFrontMin))
                ) && 
                (
                    this.LimitsTreadwidthFrontMax == input.LimitsTreadwidthFrontMax ||
                    (this.LimitsTreadwidthFrontMax != null &&
                    this.LimitsTreadwidthFrontMax.Equals(input.LimitsTreadwidthFrontMax))
                ) && 
                (
                    this.PassfailsTreadwidthFront == input.PassfailsTreadwidthFront ||
                    (this.PassfailsTreadwidthFront != null &&
                    this.PassfailsTreadwidthFront.Equals(input.PassfailsTreadwidthFront))
                ) && 
                (
                    this.ResultsTreadwidthFront == input.ResultsTreadwidthFront ||
                    (this.ResultsTreadwidthFront != null &&
                    this.ResultsTreadwidthFront.Equals(input.ResultsTreadwidthFront))
                ) && 
                (
                    this.LimitsTreadwidthRearMin == input.LimitsTreadwidthRearMin ||
                    (this.LimitsTreadwidthRearMin != null &&
                    this.LimitsTreadwidthRearMin.Equals(input.LimitsTreadwidthRearMin))
                ) && 
                (
                    this.LimitsTreadwidthRearMax == input.LimitsTreadwidthRearMax ||
                    (this.LimitsTreadwidthRearMax != null &&
                    this.LimitsTreadwidthRearMax.Equals(input.LimitsTreadwidthRearMax))
                ) && 
                (
                    this.PassfailsTreadwidthRear == input.PassfailsTreadwidthRear ||
                    (this.PassfailsTreadwidthRear != null &&
                    this.PassfailsTreadwidthRear.Equals(input.PassfailsTreadwidthRear))
                ) && 
                (
                    this.ResultsTreadwidthRear == input.ResultsTreadwidthRear ||
                    (this.ResultsTreadwidthRear != null &&
                    this.ResultsTreadwidthRear.Equals(input.ResultsTreadwidthRear))
                ) && 
                (
                    this.LimitsWheelbaseLeftMin == input.LimitsWheelbaseLeftMin ||
                    (this.LimitsWheelbaseLeftMin != null &&
                    this.LimitsWheelbaseLeftMin.Equals(input.LimitsWheelbaseLeftMin))
                ) && 
                (
                    this.LimitsWheelbaseLeftMax == input.LimitsWheelbaseLeftMax ||
                    (this.LimitsWheelbaseLeftMax != null &&
                    this.LimitsWheelbaseLeftMax.Equals(input.LimitsWheelbaseLeftMax))
                ) && 
                (
                    this.PassfailsWheelbaseLeft == input.PassfailsWheelbaseLeft ||
                    (this.PassfailsWheelbaseLeft != null &&
                    this.PassfailsWheelbaseLeft.Equals(input.PassfailsWheelbaseLeft))
                ) && 
                (
                    this.ResultsWheelbaseLeft == input.ResultsWheelbaseLeft ||
                    (this.ResultsWheelbaseLeft != null &&
                    this.ResultsWheelbaseLeft.Equals(input.ResultsWheelbaseLeft))
                ) && 
                (
                    this.LimitsWheelbaseRightMin == input.LimitsWheelbaseRightMin ||
                    (this.LimitsWheelbaseRightMin != null &&
                    this.LimitsWheelbaseRightMin.Equals(input.LimitsWheelbaseRightMin))
                ) && 
                (
                    this.LimitsWheelbaseRightMax == input.LimitsWheelbaseRightMax ||
                    (this.LimitsWheelbaseRightMax != null &&
                    this.LimitsWheelbaseRightMax.Equals(input.LimitsWheelbaseRightMax))
                ) && 
                (
                    this.PassfailsWheelbaseRight == input.PassfailsWheelbaseRight ||
                    (this.PassfailsWheelbaseRight != null &&
                    this.PassfailsWheelbaseRight.Equals(input.PassfailsWheelbaseRight))
                ) && 
                (
                    this.ResultsWheelbaseRight == input.ResultsWheelbaseRight ||
                    (this.ResultsWheelbaseRight != null &&
                    this.ResultsWheelbaseRight.Equals(input.ResultsWheelbaseRight))
                ) && 
                (
                    this.LimitsToeLrMin == input.LimitsToeLrMin ||
                    (this.LimitsToeLrMin != null &&
                    this.LimitsToeLrMin.Equals(input.LimitsToeLrMin))
                ) && 
                (
                    this.LimitsToeLrMax == input.LimitsToeLrMax ||
                    (this.LimitsToeLrMax != null &&
                    this.LimitsToeLrMax.Equals(input.LimitsToeLrMax))
                ) && 
                (
                    this.PassfailsToeLr == input.PassfailsToeLr ||
                    (this.PassfailsToeLr != null &&
                    this.PassfailsToeLr.Equals(input.PassfailsToeLr))
                ) && 
                (
                    this.ResultsToeLr == input.ResultsToeLr ||
                    (this.ResultsToeLr != null &&
                    this.ResultsToeLr.Equals(input.ResultsToeLr))
                ) && 
                (
                    this.LimitsToeRrMin == input.LimitsToeRrMin ||
                    (this.LimitsToeRrMin != null &&
                    this.LimitsToeRrMin.Equals(input.LimitsToeRrMin))
                ) && 
                (
                    this.LimitsToeRrMax == input.LimitsToeRrMax ||
                    (this.LimitsToeRrMax != null &&
                    this.LimitsToeRrMax.Equals(input.LimitsToeRrMax))
                ) && 
                (
                    this.PassfailsToeRr == input.PassfailsToeRr ||
                    (this.PassfailsToeRr != null &&
                    this.PassfailsToeRr.Equals(input.PassfailsToeRr))
                ) && 
                (
                    this.ResultsToeRr == input.ResultsToeRr ||
                    (this.ResultsToeRr != null &&
                    this.ResultsToeRr.Equals(input.ResultsToeRr))
                ) && 
                (
                    this.InspectionDate == input.InspectionDate ||
                    (this.InspectionDate != null &&
                    this.InspectionDate.Equals(input.InspectionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VehicleNumber != null)
                    hashCode = hashCode * 59 + this.VehicleNumber.GetHashCode();
                if (this.Chassis != null)
                    hashCode = hashCode * 59 + this.Chassis.GetHashCode();
                if (this.LimitsBodyoffsetMin != null)
                    hashCode = hashCode * 59 + this.LimitsBodyoffsetMin.GetHashCode();
                if (this.LimitsBodyoffsetMax != null)
                    hashCode = hashCode * 59 + this.LimitsBodyoffsetMax.GetHashCode();
                if (this.PassfailsBodyoffset != null)
                    hashCode = hashCode * 59 + this.PassfailsBodyoffset.GetHashCode();
                if (this.ResultsBodyoffset != null)
                    hashCode = hashCode * 59 + this.ResultsBodyoffset.GetHashCode();
                if (this.LimitsCamberLfMin != null)
                    hashCode = hashCode * 59 + this.LimitsCamberLfMin.GetHashCode();
                if (this.LimitsCamberLfMax != null)
                    hashCode = hashCode * 59 + this.LimitsCamberLfMax.GetHashCode();
                if (this.PassfailsCamberLf != null)
                    hashCode = hashCode * 59 + this.PassfailsCamberLf.GetHashCode();
                if (this.ResultsCamberLf != null)
                    hashCode = hashCode * 59 + this.ResultsCamberLf.GetHashCode();
                if (this.LimitsCamberLrMin != null)
                    hashCode = hashCode * 59 + this.LimitsCamberLrMin.GetHashCode();
                if (this.LimitsCamberLrMax != null)
                    hashCode = hashCode * 59 + this.LimitsCamberLrMax.GetHashCode();
                if (this.PassfailsCamberLr != null)
                    hashCode = hashCode * 59 + this.PassfailsCamberLr.GetHashCode();
                if (this.ResultsCamberLr != null)
                    hashCode = hashCode * 59 + this.ResultsCamberLr.GetHashCode();
                if (this.LimitsCamberRfMin != null)
                    hashCode = hashCode * 59 + this.LimitsCamberRfMin.GetHashCode();
                if (this.LimitsCamberRfMax != null)
                    hashCode = hashCode * 59 + this.LimitsCamberRfMax.GetHashCode();
                if (this.PassfailsCamberRf != null)
                    hashCode = hashCode * 59 + this.PassfailsCamberRf.GetHashCode();
                if (this.ResultsCamberRf != null)
                    hashCode = hashCode * 59 + this.ResultsCamberRf.GetHashCode();
                if (this.LimitsCamberRrMin != null)
                    hashCode = hashCode * 59 + this.LimitsCamberRrMin.GetHashCode();
                if (this.LimitsCamberRrMax != null)
                    hashCode = hashCode * 59 + this.LimitsCamberRrMax.GetHashCode();
                if (this.PassfailsCamberRr != null)
                    hashCode = hashCode * 59 + this.PassfailsCamberRr.GetHashCode();
                if (this.ResultsCamberRr != null)
                    hashCode = hashCode * 59 + this.ResultsCamberRr.GetHashCode();
                if (this.LimitsLfFramerailMin != null)
                    hashCode = hashCode * 59 + this.LimitsLfFramerailMin.GetHashCode();
                if (this.LimitsLfFramerailMax != null)
                    hashCode = hashCode * 59 + this.LimitsLfFramerailMax.GetHashCode();
                if (this.PassfailsLfFramerail != null)
                    hashCode = hashCode * 59 + this.PassfailsLfFramerail.GetHashCode();
                if (this.ResultsLfFramerail != null)
                    hashCode = hashCode * 59 + this.ResultsLfFramerail.GetHashCode();
                if (this.LimitsLrFramerailMin != null)
                    hashCode = hashCode * 59 + this.LimitsLrFramerailMin.GetHashCode();
                if (this.LimitsLrFramerailMax != null)
                    hashCode = hashCode * 59 + this.LimitsLrFramerailMax.GetHashCode();
                if (this.PassfailsLrFramerail != null)
                    hashCode = hashCode * 59 + this.PassfailsLrFramerail.GetHashCode();
                if (this.ResultsLrFramerail != null)
                    hashCode = hashCode * 59 + this.ResultsLrFramerail.GetHashCode();
                if (this.LimitsRfFramerailMin != null)
                    hashCode = hashCode * 59 + this.LimitsRfFramerailMin.GetHashCode();
                if (this.LimitsRfFramerailMax != null)
                    hashCode = hashCode * 59 + this.LimitsRfFramerailMax.GetHashCode();
                if (this.PassfailsRfFramerail != null)
                    hashCode = hashCode * 59 + this.PassfailsRfFramerail.GetHashCode();
                if (this.ResultsRfFramerail != null)
                    hashCode = hashCode * 59 + this.ResultsRfFramerail.GetHashCode();
                if (this.LimitsRhLocationLeftMin != null)
                    hashCode = hashCode * 59 + this.LimitsRhLocationLeftMin.GetHashCode();
                if (this.LimitsRhLocationLeftMax != null)
                    hashCode = hashCode * 59 + this.LimitsRhLocationLeftMax.GetHashCode();
                if (this.PassfailsRhLocationLeft != null)
                    hashCode = hashCode * 59 + this.PassfailsRhLocationLeft.GetHashCode();
                if (this.ResultsRhLocationLeft != null)
                    hashCode = hashCode * 59 + this.ResultsRhLocationLeft.GetHashCode();
                if (this.LimitsRhLocationRightMin != null)
                    hashCode = hashCode * 59 + this.LimitsRhLocationRightMin.GetHashCode();
                if (this.LimitsRhLocationRightMax != null)
                    hashCode = hashCode * 59 + this.LimitsRhLocationRightMax.GetHashCode();
                if (this.PassfailsRhLocationRight != null)
                    hashCode = hashCode * 59 + this.PassfailsRhLocationRight.GetHashCode();
                if (this.ResultsRhLocationRight != null)
                    hashCode = hashCode * 59 + this.ResultsRhLocationRight.GetHashCode();
                if (this.LimitsRhSkewMin != null)
                    hashCode = hashCode * 59 + this.LimitsRhSkewMin.GetHashCode();
                if (this.LimitsRhSkewMax != null)
                    hashCode = hashCode * 59 + this.LimitsRhSkewMax.GetHashCode();
                if (this.PassfailsRhSkew != null)
                    hashCode = hashCode * 59 + this.PassfailsRhSkew.GetHashCode();
                if (this.ResultsRhSkew != null)
                    hashCode = hashCode * 59 + this.ResultsRhSkew.GetHashCode();
                if (this.LimitsRrFramerailMin != null)
                    hashCode = hashCode * 59 + this.LimitsRrFramerailMin.GetHashCode();
                if (this.LimitsRrFramerailMax != null)
                    hashCode = hashCode * 59 + this.LimitsRrFramerailMax.GetHashCode();
                if (this.PassfailsRrFramerail != null)
                    hashCode = hashCode * 59 + this.PassfailsRrFramerail.GetHashCode();
                if (this.ResultsRrFramerail != null)
                    hashCode = hashCode * 59 + this.ResultsRrFramerail.GetHashCode();
                if (this.LimitsRightParallelMin != null)
                    hashCode = hashCode * 59 + this.LimitsRightParallelMin.GetHashCode();
                if (this.LimitsRightParallelMax != null)
                    hashCode = hashCode * 59 + this.LimitsRightParallelMax.GetHashCode();
                if (this.PassfailsRightParallel != null)
                    hashCode = hashCode * 59 + this.PassfailsRightParallel.GetHashCode();
                if (this.ResultsRightParallel != null)
                    hashCode = hashCode * 59 + this.ResultsRightParallel.GetHashCode();
                if (this.LimitsTreadwidthFrontMin != null)
                    hashCode = hashCode * 59 + this.LimitsTreadwidthFrontMin.GetHashCode();
                if (this.LimitsTreadwidthFrontMax != null)
                    hashCode = hashCode * 59 + this.LimitsTreadwidthFrontMax.GetHashCode();
                if (this.PassfailsTreadwidthFront != null)
                    hashCode = hashCode * 59 + this.PassfailsTreadwidthFront.GetHashCode();
                if (this.ResultsTreadwidthFront != null)
                    hashCode = hashCode * 59 + this.ResultsTreadwidthFront.GetHashCode();
                if (this.LimitsTreadwidthRearMin != null)
                    hashCode = hashCode * 59 + this.LimitsTreadwidthRearMin.GetHashCode();
                if (this.LimitsTreadwidthRearMax != null)
                    hashCode = hashCode * 59 + this.LimitsTreadwidthRearMax.GetHashCode();
                if (this.PassfailsTreadwidthRear != null)
                    hashCode = hashCode * 59 + this.PassfailsTreadwidthRear.GetHashCode();
                if (this.ResultsTreadwidthRear != null)
                    hashCode = hashCode * 59 + this.ResultsTreadwidthRear.GetHashCode();
                if (this.LimitsWheelbaseLeftMin != null)
                    hashCode = hashCode * 59 + this.LimitsWheelbaseLeftMin.GetHashCode();
                if (this.LimitsWheelbaseLeftMax != null)
                    hashCode = hashCode * 59 + this.LimitsWheelbaseLeftMax.GetHashCode();
                if (this.PassfailsWheelbaseLeft != null)
                    hashCode = hashCode * 59 + this.PassfailsWheelbaseLeft.GetHashCode();
                if (this.ResultsWheelbaseLeft != null)
                    hashCode = hashCode * 59 + this.ResultsWheelbaseLeft.GetHashCode();
                if (this.LimitsWheelbaseRightMin != null)
                    hashCode = hashCode * 59 + this.LimitsWheelbaseRightMin.GetHashCode();
                if (this.LimitsWheelbaseRightMax != null)
                    hashCode = hashCode * 59 + this.LimitsWheelbaseRightMax.GetHashCode();
                if (this.PassfailsWheelbaseRight != null)
                    hashCode = hashCode * 59 + this.PassfailsWheelbaseRight.GetHashCode();
                if (this.ResultsWheelbaseRight != null)
                    hashCode = hashCode * 59 + this.ResultsWheelbaseRight.GetHashCode();
                if (this.LimitsToeLrMin != null)
                    hashCode = hashCode * 59 + this.LimitsToeLrMin.GetHashCode();
                if (this.LimitsToeLrMax != null)
                    hashCode = hashCode * 59 + this.LimitsToeLrMax.GetHashCode();
                if (this.PassfailsToeLr != null)
                    hashCode = hashCode * 59 + this.PassfailsToeLr.GetHashCode();
                if (this.ResultsToeLr != null)
                    hashCode = hashCode * 59 + this.ResultsToeLr.GetHashCode();
                if (this.LimitsToeRrMin != null)
                    hashCode = hashCode * 59 + this.LimitsToeRrMin.GetHashCode();
                if (this.LimitsToeRrMax != null)
                    hashCode = hashCode * 59 + this.LimitsToeRrMax.GetHashCode();
                if (this.PassfailsToeRr != null)
                    hashCode = hashCode * 59 + this.PassfailsToeRr.GetHashCode();
                if (this.ResultsToeRr != null)
                    hashCode = hashCode * 59 + this.ResultsToeRr.GetHashCode();
                if (this.InspectionDate != null)
                    hashCode = hashCode * 59 + this.InspectionDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
