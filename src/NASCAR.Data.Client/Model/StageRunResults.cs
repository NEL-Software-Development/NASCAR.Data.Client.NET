/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// StageRunResults
    /// </summary>
    [DataContract]
        public partial class StageRunResults :  IEquatable<StageRunResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StageRunResults" /> class.
        /// </summary>
        /// <param name="stageNumber">Stage number.</param>
        /// <param name="stageName">Stage name.</param>
        /// <param name="lap">The lap when the stage occurred.</param>
        /// <param name="results">Stage results.</param>
        public StageRunResults(int? stageNumber = default(int?), string stageName = default(string), int? lap = default(int?), Collection<StageResult> results = default(Collection<StageResult>))
        {
            this.StageNumber = stageNumber;
            this.StageName = stageName;
            this.Lap = lap;
            this.Results = results;
        }
        
        /// <summary>
        /// Stage number
        /// </summary>
        /// <value>Stage number</value>
        [DataMember(Name="stage_number", EmitDefaultValue=false)]
        public int? StageNumber { get; set; }

        /// <summary>
        /// Stage name
        /// </summary>
        /// <value>Stage name</value>
        [DataMember(Name="stage_name", EmitDefaultValue=false)]
        public string StageName { get; set; }

        /// <summary>
        /// The lap when the stage occurred
        /// </summary>
        /// <value>The lap when the stage occurred</value>
        [DataMember(Name="lap", EmitDefaultValue=false)]
        public int? Lap { get; set; }

        /// <summary>
        /// Stage results
        /// </summary>
        /// <value>Stage results</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public Collection<StageResult> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StageRunResults {\n");
            sb.Append("  StageNumber: ").Append(StageNumber).Append("\n");
            sb.Append("  StageName: ").Append(StageName).Append("\n");
            sb.Append("  Lap: ").Append(Lap).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StageRunResults);
        }

        /// <summary>
        /// Returns true if StageRunResults instances are equal
        /// </summary>
        /// <param name="input">Instance of StageRunResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StageRunResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StageNumber == input.StageNumber ||
                    (this.StageNumber != null &&
                    this.StageNumber.Equals(input.StageNumber))
                ) && 
                (
                    this.StageName == input.StageName ||
                    (this.StageName != null &&
                    this.StageName.Equals(input.StageName))
                ) && 
                (
                    this.Lap == input.Lap ||
                    (this.Lap != null &&
                    this.Lap.Equals(input.Lap))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StageNumber != null)
                    hashCode = hashCode * 59 + this.StageNumber.GetHashCode();
                if (this.StageName != null)
                    hashCode = hashCode * 59 + this.StageName.GetHashCode();
                if (this.Lap != null)
                    hashCode = hashCode * 59 + this.Lap.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
