/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// PracticeRunResults
    /// </summary>
    [DataContract]
        public partial class PracticeRunResults :  IEquatable<PracticeRunResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PracticeRunResults" /> class.
        /// </summary>
        /// <param name="runName">runName.</param>
        /// <param name="runState">Inactive, Active, Completed.</param>
        /// <param name="results">results.</param>
        public PracticeRunResults(string runName = default(string), string runState = default(string), Collection<RunResult> results = default(Collection<RunResult>))
        {
            this.RunName = runName;
            this.RunState = runState;
            this.Results = results;
        }
        
        /// <summary>
        /// Gets or Sets RunName
        /// </summary>
        [DataMember(Name="run_name", EmitDefaultValue=false)]
        public string RunName { get; set; }

        /// <summary>
        /// Inactive, Active, Completed
        /// </summary>
        /// <value>Inactive, Active, Completed</value>
        [DataMember(Name="run_state", EmitDefaultValue=false)]
        public string RunState { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public Collection<RunResult> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PracticeRunResults {\n");
            sb.Append("  RunName: ").Append(RunName).Append("\n");
            sb.Append("  RunState: ").Append(RunState).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PracticeRunResults);
        }

        /// <summary>
        /// Returns true if PracticeRunResults instances are equal
        /// </summary>
        /// <param name="input">Instance of PracticeRunResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PracticeRunResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RunName == input.RunName ||
                    (this.RunName != null &&
                    this.RunName.Equals(input.RunName))
                ) && 
                (
                    this.RunState == input.RunState ||
                    (this.RunState != null &&
                    this.RunState.Equals(input.RunState))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunName != null)
                    hashCode = hashCode * 59 + this.RunName.GetHashCode();
                if (this.RunState != null)
                    hashCode = hashCode * 59 + this.RunState.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
