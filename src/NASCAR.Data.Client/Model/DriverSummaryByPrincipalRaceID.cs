/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// DriverSummaryByPrincipalRaceID
    /// </summary>
    [DataContract]
        public partial class DriverSummaryByPrincipalRaceID :  IEquatable<DriverSummaryByPrincipalRaceID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DriverSummaryByPrincipalRaceID" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="averageStart">averageStart.</param>
        /// <param name="averageFinish">averageFinish.</param>
        /// <param name="dnf">dnf.</param>
        /// <param name="driverId">driverId.</param>
        /// <param name="lapsCompleted">lapsCompleted.</param>
        /// <param name="lapsLed">lapsLed.</param>
        /// <param name="leadLapFinish">leadLapFinish.</param>
        /// <param name="milesCompleted">milesCompleted.</param>
        /// <param name="poles">poles.</param>
        /// <param name="runningAtFinish">runningAtFinish.</param>
        /// <param name="seriesId">seriesId.</param>
        /// <param name="top5">top5.</param>
        /// <param name="top10">top10.</param>
        /// <param name="totalRaces">totalRaces.</param>
        /// <param name="wins">wins.</param>
        /// <param name="principalRaceId">principalRaceId.</param>
        /// <param name="raceName">raceName.</param>
        /// <param name="raceDate">raceDate.</param>
        /// <param name="season">season.</param>
        public DriverSummaryByPrincipalRaceID(int? id = default(int?), double? averageStart = default(double?), double? averageFinish = default(double?), int? dnf = default(int?), int? driverId = default(int?), int? lapsCompleted = default(int?), int? lapsLed = default(int?), int? leadLapFinish = default(int?), double? milesCompleted = default(double?), int? poles = default(int?), int? runningAtFinish = default(int?), int? seriesId = default(int?), int? top5 = default(int?), int? top10 = default(int?), int? totalRaces = default(int?), int? wins = default(int?), int? principalRaceId = default(int?), string raceName = default(string), DateTimeOffset? raceDate = default(DateTimeOffset?), int? season = default(int?))
        {
            this.Id = id;
            this.AverageStart = averageStart;
            this.AverageFinish = averageFinish;
            this.Dnf = dnf;
            this.DriverId = driverId;
            this.LapsCompleted = lapsCompleted;
            this.LapsLed = lapsLed;
            this.LeadLapFinish = leadLapFinish;
            this.MilesCompleted = milesCompleted;
            this.Poles = poles;
            this.RunningAtFinish = runningAtFinish;
            this.SeriesId = seriesId;
            this.Top5 = top5;
            this.Top10 = top10;
            this.TotalRaces = totalRaces;
            this.Wins = wins;
            this.PrincipalRaceId = principalRaceId;
            this.RaceName = raceName;
            this.RaceDate = raceDate;
            this.Season = season;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets AverageStart
        /// </summary>
        [DataMember(Name="average_start", EmitDefaultValue=false)]
        public double? AverageStart { get; set; }

        /// <summary>
        /// Gets or Sets AverageFinish
        /// </summary>
        [DataMember(Name="average_finish", EmitDefaultValue=false)]
        public double? AverageFinish { get; set; }

        /// <summary>
        /// Gets or Sets Dnf
        /// </summary>
        [DataMember(Name="dnf", EmitDefaultValue=false)]
        public int? Dnf { get; set; }

        /// <summary>
        /// Gets or Sets DriverId
        /// </summary>
        [DataMember(Name="driver_id", EmitDefaultValue=false)]
        public int? DriverId { get; set; }

        /// <summary>
        /// Gets or Sets LapsCompleted
        /// </summary>
        [DataMember(Name="laps_completed", EmitDefaultValue=false)]
        public int? LapsCompleted { get; set; }

        /// <summary>
        /// Gets or Sets LapsLed
        /// </summary>
        [DataMember(Name="laps_led", EmitDefaultValue=false)]
        public int? LapsLed { get; set; }

        /// <summary>
        /// Gets or Sets LeadLapFinish
        /// </summary>
        [DataMember(Name="lead_lap_finish", EmitDefaultValue=false)]
        public int? LeadLapFinish { get; set; }

        /// <summary>
        /// Gets or Sets MilesCompleted
        /// </summary>
        [DataMember(Name="miles_completed", EmitDefaultValue=false)]
        public double? MilesCompleted { get; set; }

        /// <summary>
        /// Gets or Sets Poles
        /// </summary>
        [DataMember(Name="poles", EmitDefaultValue=false)]
        public int? Poles { get; set; }

        /// <summary>
        /// Gets or Sets RunningAtFinish
        /// </summary>
        [DataMember(Name="running_at_finish", EmitDefaultValue=false)]
        public int? RunningAtFinish { get; set; }

        /// <summary>
        /// Gets or Sets SeriesId
        /// </summary>
        [DataMember(Name="series_id", EmitDefaultValue=false)]
        public int? SeriesId { get; set; }

        /// <summary>
        /// Gets or Sets Top5
        /// </summary>
        [DataMember(Name="top5", EmitDefaultValue=false)]
        public int? Top5 { get; set; }

        /// <summary>
        /// Gets or Sets Top10
        /// </summary>
        [DataMember(Name="top10", EmitDefaultValue=false)]
        public int? Top10 { get; set; }

        /// <summary>
        /// Gets or Sets TotalRaces
        /// </summary>
        [DataMember(Name="total_races", EmitDefaultValue=false)]
        public int? TotalRaces { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public int? Wins { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalRaceId
        /// </summary>
        [DataMember(Name="principal_race_id", EmitDefaultValue=false)]
        public int? PrincipalRaceId { get; set; }

        /// <summary>
        /// Gets or Sets RaceName
        /// </summary>
        [DataMember(Name="race_name", EmitDefaultValue=false)]
        public string RaceName { get; set; }

        /// <summary>
        /// Gets or Sets RaceDate
        /// </summary>
        [DataMember(Name="race_date", EmitDefaultValue=false)]
        public DateTimeOffset? RaceDate { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name="season", EmitDefaultValue=false)]
        public int? Season { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DriverSummaryByPrincipalRaceID {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AverageStart: ").Append(AverageStart).Append("\n");
            sb.Append("  AverageFinish: ").Append(AverageFinish).Append("\n");
            sb.Append("  Dnf: ").Append(Dnf).Append("\n");
            sb.Append("  DriverId: ").Append(DriverId).Append("\n");
            sb.Append("  LapsCompleted: ").Append(LapsCompleted).Append("\n");
            sb.Append("  LapsLed: ").Append(LapsLed).Append("\n");
            sb.Append("  LeadLapFinish: ").Append(LeadLapFinish).Append("\n");
            sb.Append("  MilesCompleted: ").Append(MilesCompleted).Append("\n");
            sb.Append("  Poles: ").Append(Poles).Append("\n");
            sb.Append("  RunningAtFinish: ").Append(RunningAtFinish).Append("\n");
            sb.Append("  SeriesId: ").Append(SeriesId).Append("\n");
            sb.Append("  Top5: ").Append(Top5).Append("\n");
            sb.Append("  Top10: ").Append(Top10).Append("\n");
            sb.Append("  TotalRaces: ").Append(TotalRaces).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  PrincipalRaceId: ").Append(PrincipalRaceId).Append("\n");
            sb.Append("  RaceName: ").Append(RaceName).Append("\n");
            sb.Append("  RaceDate: ").Append(RaceDate).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DriverSummaryByPrincipalRaceID);
        }

        /// <summary>
        /// Returns true if DriverSummaryByPrincipalRaceID instances are equal
        /// </summary>
        /// <param name="input">Instance of DriverSummaryByPrincipalRaceID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DriverSummaryByPrincipalRaceID input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AverageStart == input.AverageStart ||
                    (this.AverageStart != null &&
                    this.AverageStart.Equals(input.AverageStart))
                ) && 
                (
                    this.AverageFinish == input.AverageFinish ||
                    (this.AverageFinish != null &&
                    this.AverageFinish.Equals(input.AverageFinish))
                ) && 
                (
                    this.Dnf == input.Dnf ||
                    (this.Dnf != null &&
                    this.Dnf.Equals(input.Dnf))
                ) && 
                (
                    this.DriverId == input.DriverId ||
                    (this.DriverId != null &&
                    this.DriverId.Equals(input.DriverId))
                ) && 
                (
                    this.LapsCompleted == input.LapsCompleted ||
                    (this.LapsCompleted != null &&
                    this.LapsCompleted.Equals(input.LapsCompleted))
                ) && 
                (
                    this.LapsLed == input.LapsLed ||
                    (this.LapsLed != null &&
                    this.LapsLed.Equals(input.LapsLed))
                ) && 
                (
                    this.LeadLapFinish == input.LeadLapFinish ||
                    (this.LeadLapFinish != null &&
                    this.LeadLapFinish.Equals(input.LeadLapFinish))
                ) && 
                (
                    this.MilesCompleted == input.MilesCompleted ||
                    (this.MilesCompleted != null &&
                    this.MilesCompleted.Equals(input.MilesCompleted))
                ) && 
                (
                    this.Poles == input.Poles ||
                    (this.Poles != null &&
                    this.Poles.Equals(input.Poles))
                ) && 
                (
                    this.RunningAtFinish == input.RunningAtFinish ||
                    (this.RunningAtFinish != null &&
                    this.RunningAtFinish.Equals(input.RunningAtFinish))
                ) && 
                (
                    this.SeriesId == input.SeriesId ||
                    (this.SeriesId != null &&
                    this.SeriesId.Equals(input.SeriesId))
                ) && 
                (
                    this.Top5 == input.Top5 ||
                    (this.Top5 != null &&
                    this.Top5.Equals(input.Top5))
                ) && 
                (
                    this.Top10 == input.Top10 ||
                    (this.Top10 != null &&
                    this.Top10.Equals(input.Top10))
                ) && 
                (
                    this.TotalRaces == input.TotalRaces ||
                    (this.TotalRaces != null &&
                    this.TotalRaces.Equals(input.TotalRaces))
                ) && 
                (
                    this.Wins == input.Wins ||
                    (this.Wins != null &&
                    this.Wins.Equals(input.Wins))
                ) && 
                (
                    this.PrincipalRaceId == input.PrincipalRaceId ||
                    (this.PrincipalRaceId != null &&
                    this.PrincipalRaceId.Equals(input.PrincipalRaceId))
                ) && 
                (
                    this.RaceName == input.RaceName ||
                    (this.RaceName != null &&
                    this.RaceName.Equals(input.RaceName))
                ) && 
                (
                    this.RaceDate == input.RaceDate ||
                    (this.RaceDate != null &&
                    this.RaceDate.Equals(input.RaceDate))
                ) && 
                (
                    this.Season == input.Season ||
                    (this.Season != null &&
                    this.Season.Equals(input.Season))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AverageStart != null)
                    hashCode = hashCode * 59 + this.AverageStart.GetHashCode();
                if (this.AverageFinish != null)
                    hashCode = hashCode * 59 + this.AverageFinish.GetHashCode();
                if (this.Dnf != null)
                    hashCode = hashCode * 59 + this.Dnf.GetHashCode();
                if (this.DriverId != null)
                    hashCode = hashCode * 59 + this.DriverId.GetHashCode();
                if (this.LapsCompleted != null)
                    hashCode = hashCode * 59 + this.LapsCompleted.GetHashCode();
                if (this.LapsLed != null)
                    hashCode = hashCode * 59 + this.LapsLed.GetHashCode();
                if (this.LeadLapFinish != null)
                    hashCode = hashCode * 59 + this.LeadLapFinish.GetHashCode();
                if (this.MilesCompleted != null)
                    hashCode = hashCode * 59 + this.MilesCompleted.GetHashCode();
                if (this.Poles != null)
                    hashCode = hashCode * 59 + this.Poles.GetHashCode();
                if (this.RunningAtFinish != null)
                    hashCode = hashCode * 59 + this.RunningAtFinish.GetHashCode();
                if (this.SeriesId != null)
                    hashCode = hashCode * 59 + this.SeriesId.GetHashCode();
                if (this.Top5 != null)
                    hashCode = hashCode * 59 + this.Top5.GetHashCode();
                if (this.Top10 != null)
                    hashCode = hashCode * 59 + this.Top10.GetHashCode();
                if (this.TotalRaces != null)
                    hashCode = hashCode * 59 + this.TotalRaces.GetHashCode();
                if (this.Wins != null)
                    hashCode = hashCode * 59 + this.Wins.GetHashCode();
                if (this.PrincipalRaceId != null)
                    hashCode = hashCode * 59 + this.PrincipalRaceId.GetHashCode();
                if (this.RaceName != null)
                    hashCode = hashCode * 59 + this.RaceName.GetHashCode();
                if (this.RaceDate != null)
                    hashCode = hashCode * 59 + this.RaceDate.GetHashCode();
                if (this.Season != null)
                    hashCode = hashCode * 59 + this.Season.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
