/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// Flag
    /// </summary>
    [DataContract]
        public partial class Flag :  IEquatable<Flag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Flag" /> class.
        /// </summary>
        /// <param name="startLap">startLap.</param>
        /// <param name="finishLap">finishLap.</param>
        /// <param name="numberOfLaps">numberOfLaps.</param>
        /// <param name="elapsedTime">elapsedTime.</param>
        /// <param name="time">time.</param>
        /// <param name="duration">duration.</param>
        /// <param name="flagState">NONE, WARMUP, GREEN, YELLOW, RED, WHITE, FINISH, EXTRA.</param>
        /// <param name="comment">comment.</param>
        public Flag(int? startLap = default(int?), int? finishLap = default(int?), int? numberOfLaps = default(int?), int? elapsedTime = default(int?), DateTimeOffset? time = default(DateTimeOffset?), int? duration = default(int?), string flagState = default(string), string comment = default(string))
        {
            this.StartLap = startLap;
            this.FinishLap = finishLap;
            this.NumberOfLaps = numberOfLaps;
            this.ElapsedTime = elapsedTime;
            this.Time = time;
            this.Duration = duration;
            this.FlagState = flagState;
            this.Comment = comment;
        }
        
        /// <summary>
        /// Gets or Sets StartLap
        /// </summary>
        [DataMember(Name="start_lap", EmitDefaultValue=false)]
        public int? StartLap { get; set; }

        /// <summary>
        /// Gets or Sets FinishLap
        /// </summary>
        [DataMember(Name="finish_lap", EmitDefaultValue=false)]
        public int? FinishLap { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfLaps
        /// </summary>
        [DataMember(Name="number_of_laps", EmitDefaultValue=false)]
        public int? NumberOfLaps { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedTime
        /// </summary>
        [DataMember(Name="elapsed_time", EmitDefaultValue=false)]
        public int? ElapsedTime { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTimeOffset? Time { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// NONE, WARMUP, GREEN, YELLOW, RED, WHITE, FINISH, EXTRA
        /// </summary>
        /// <value>NONE, WARMUP, GREEN, YELLOW, RED, WHITE, FINISH, EXTRA</value>
        [DataMember(Name="flag_state", EmitDefaultValue=false)]
        public string FlagState { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Flag {\n");
            sb.Append("  StartLap: ").Append(StartLap).Append("\n");
            sb.Append("  FinishLap: ").Append(FinishLap).Append("\n");
            sb.Append("  NumberOfLaps: ").Append(NumberOfLaps).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  FlagState: ").Append(FlagState).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Flag);
        }

        /// <summary>
        /// Returns true if Flag instances are equal
        /// </summary>
        /// <param name="input">Instance of Flag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Flag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartLap == input.StartLap ||
                    (this.StartLap != null &&
                    this.StartLap.Equals(input.StartLap))
                ) && 
                (
                    this.FinishLap == input.FinishLap ||
                    (this.FinishLap != null &&
                    this.FinishLap.Equals(input.FinishLap))
                ) && 
                (
                    this.NumberOfLaps == input.NumberOfLaps ||
                    (this.NumberOfLaps != null &&
                    this.NumberOfLaps.Equals(input.NumberOfLaps))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.FlagState == input.FlagState ||
                    (this.FlagState != null &&
                    this.FlagState.Equals(input.FlagState))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartLap != null)
                    hashCode = hashCode * 59 + this.StartLap.GetHashCode();
                if (this.FinishLap != null)
                    hashCode = hashCode * 59 + this.FinishLap.GetHashCode();
                if (this.NumberOfLaps != null)
                    hashCode = hashCode * 59 + this.NumberOfLaps.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.FlagState != null)
                    hashCode = hashCode * 59 + this.FlagState.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
