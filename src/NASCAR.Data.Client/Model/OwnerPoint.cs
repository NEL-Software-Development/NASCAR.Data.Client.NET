/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NASCAR.Data.Client.Client.SwaggerDateConverter;

namespace NASCAR.Data.Client.Model
{
    /// <summary>
    /// OwnerPoint
    /// </summary>
    [DataContract]
        public partial class OwnerPoint :  IEquatable<OwnerPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OwnerPoint" /> class.
        /// </summary>
        /// <param name="owner">Owner name.</param>
        /// <param name="vehicleNumber">Vehicle number.</param>
        /// <param name="position">Points position.</param>
        /// <param name="points">Total points.</param>
        /// <param name="playoffPoints">Total playoff points.</param>
        /// <param name="playoffRank">Current playoff rank.</param>
        /// <param name="deltaLeader">Number of points behind the leader.</param>
        /// <param name="deltaNext">Number of points behind the next position.</param>
        /// <param name="starts">Number of starts this season.</param>
        /// <param name="poles">Number of times the pole position was earned.</param>
        /// <param name="wins">Total race wins.</param>
        /// <param name="stage1Wins">Stage 1 wins.</param>
        /// <param name="stage2Wins">Stage 2 wins.</param>
        /// <param name="stage3Wins">Stage 3 wins.</param>
        /// <param name="stagePoints">Total stage points.</param>
        /// <param name="playoffRaceWins">Playoff race wins.</param>
        /// <param name="playoffStageWins">Playoff stage wins.</param>
        /// <param name="pointsEarnedThisRace">Points earned this race.</param>
        /// <param name="playoffPointsEarnedThisRace">Playoff points earned this race.</param>
        /// <param name="stagePointsEarnedThisRace">Stage points earned this race.</param>
        /// <param name="top5">Number of Top 5 finishes.</param>
        /// <param name="top10">Number of Top 10 finishes.</param>
        /// <param name="lapsLed">Total laps led.</param>
        /// <param name="dnf">Number of times the vehicle did not finish the race.</param>
        /// <param name="madePlayoffs">Whether or not the owner made the playoffs.</param>
        /// <param name="inPlayoffs">Whether or not the owner is still in the playoffs.</param>
        /// <param name="highestRound">Highest playoff round earned.</param>
        public OwnerPoint(string owner = default(string), string vehicleNumber = default(string), int? position = default(int?), int? points = default(int?), int? playoffPoints = default(int?), int? playoffRank = default(int?), int? deltaLeader = default(int?), int? deltaNext = default(int?), int? starts = default(int?), int? poles = default(int?), int? wins = default(int?), int? stage1Wins = default(int?), int? stage2Wins = default(int?), int? stage3Wins = default(int?), int? stagePoints = default(int?), int? playoffRaceWins = default(int?), int? playoffStageWins = default(int?), int? pointsEarnedThisRace = default(int?), int? playoffPointsEarnedThisRace = default(int?), int? stagePointsEarnedThisRace = default(int?), int? top5 = default(int?), int? top10 = default(int?), int? lapsLed = default(int?), int? dnf = default(int?), bool? madePlayoffs = default(bool?), bool? inPlayoffs = default(bool?), int? highestRound = default(int?))
        {
            this.Owner = owner;
            this.VehicleNumber = vehicleNumber;
            this.Position = position;
            this.Points = points;
            this.PlayoffPoints = playoffPoints;
            this.PlayoffRank = playoffRank;
            this.DeltaLeader = deltaLeader;
            this.DeltaNext = deltaNext;
            this.Starts = starts;
            this.Poles = poles;
            this.Wins = wins;
            this.Stage1Wins = stage1Wins;
            this.Stage2Wins = stage2Wins;
            this.Stage3Wins = stage3Wins;
            this.StagePoints = stagePoints;
            this.PlayoffRaceWins = playoffRaceWins;
            this.PlayoffStageWins = playoffStageWins;
            this.PointsEarnedThisRace = pointsEarnedThisRace;
            this.PlayoffPointsEarnedThisRace = playoffPointsEarnedThisRace;
            this.StagePointsEarnedThisRace = stagePointsEarnedThisRace;
            this.Top5 = top5;
            this.Top10 = top10;
            this.LapsLed = lapsLed;
            this.Dnf = dnf;
            this.MadePlayoffs = madePlayoffs;
            this.InPlayoffs = inPlayoffs;
            this.HighestRound = highestRound;
        }
        
        /// <summary>
        /// Owner name
        /// </summary>
        /// <value>Owner name</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Vehicle number
        /// </summary>
        /// <value>Vehicle number</value>
        [DataMember(Name="vehicle_number", EmitDefaultValue=false)]
        public string VehicleNumber { get; set; }

        /// <summary>
        /// Points position
        /// </summary>
        /// <value>Points position</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Total points
        /// </summary>
        /// <value>Total points</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public int? Points { get; set; }

        /// <summary>
        /// Total playoff points
        /// </summary>
        /// <value>Total playoff points</value>
        [DataMember(Name="playoff_points", EmitDefaultValue=false)]
        public int? PlayoffPoints { get; set; }

        /// <summary>
        /// Current playoff rank
        /// </summary>
        /// <value>Current playoff rank</value>
        [DataMember(Name="playoff_rank", EmitDefaultValue=false)]
        public int? PlayoffRank { get; set; }

        /// <summary>
        /// Number of points behind the leader
        /// </summary>
        /// <value>Number of points behind the leader</value>
        [DataMember(Name="delta_leader", EmitDefaultValue=false)]
        public int? DeltaLeader { get; set; }

        /// <summary>
        /// Number of points behind the next position
        /// </summary>
        /// <value>Number of points behind the next position</value>
        [DataMember(Name="delta_next", EmitDefaultValue=false)]
        public int? DeltaNext { get; set; }

        /// <summary>
        /// Number of starts this season
        /// </summary>
        /// <value>Number of starts this season</value>
        [DataMember(Name="starts", EmitDefaultValue=false)]
        public int? Starts { get; set; }

        /// <summary>
        /// Number of times the pole position was earned
        /// </summary>
        /// <value>Number of times the pole position was earned</value>
        [DataMember(Name="poles", EmitDefaultValue=false)]
        public int? Poles { get; set; }

        /// <summary>
        /// Total race wins
        /// </summary>
        /// <value>Total race wins</value>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public int? Wins { get; set; }

        /// <summary>
        /// Stage 1 wins
        /// </summary>
        /// <value>Stage 1 wins</value>
        [DataMember(Name="stage_1_wins", EmitDefaultValue=false)]
        public int? Stage1Wins { get; set; }

        /// <summary>
        /// Stage 2 wins
        /// </summary>
        /// <value>Stage 2 wins</value>
        [DataMember(Name="stage_2_wins", EmitDefaultValue=false)]
        public int? Stage2Wins { get; set; }

        /// <summary>
        /// Stage 3 wins
        /// </summary>
        /// <value>Stage 3 wins</value>
        [DataMember(Name="stage_3_wins", EmitDefaultValue=false)]
        public int? Stage3Wins { get; set; }

        /// <summary>
        /// Total stage points
        /// </summary>
        /// <value>Total stage points</value>
        [DataMember(Name="stage_points", EmitDefaultValue=false)]
        public int? StagePoints { get; set; }

        /// <summary>
        /// Playoff race wins
        /// </summary>
        /// <value>Playoff race wins</value>
        [DataMember(Name="playoff_race_wins", EmitDefaultValue=false)]
        public int? PlayoffRaceWins { get; set; }

        /// <summary>
        /// Playoff stage wins
        /// </summary>
        /// <value>Playoff stage wins</value>
        [DataMember(Name="playoff_stage_wins", EmitDefaultValue=false)]
        public int? PlayoffStageWins { get; set; }

        /// <summary>
        /// Points earned this race
        /// </summary>
        /// <value>Points earned this race</value>
        [DataMember(Name="points_earned_this_race", EmitDefaultValue=false)]
        public int? PointsEarnedThisRace { get; set; }

        /// <summary>
        /// Playoff points earned this race
        /// </summary>
        /// <value>Playoff points earned this race</value>
        [DataMember(Name="playoff_points_earned_this_race", EmitDefaultValue=false)]
        public int? PlayoffPointsEarnedThisRace { get; set; }

        /// <summary>
        /// Stage points earned this race
        /// </summary>
        /// <value>Stage points earned this race</value>
        [DataMember(Name="stage_points_earned_this_race", EmitDefaultValue=false)]
        public int? StagePointsEarnedThisRace { get; set; }

        /// <summary>
        /// Number of Top 5 finishes
        /// </summary>
        /// <value>Number of Top 5 finishes</value>
        [DataMember(Name="top5", EmitDefaultValue=false)]
        public int? Top5 { get; set; }

        /// <summary>
        /// Number of Top 10 finishes
        /// </summary>
        /// <value>Number of Top 10 finishes</value>
        [DataMember(Name="top10", EmitDefaultValue=false)]
        public int? Top10 { get; set; }

        /// <summary>
        /// Total laps led
        /// </summary>
        /// <value>Total laps led</value>
        [DataMember(Name="laps_led", EmitDefaultValue=false)]
        public int? LapsLed { get; set; }

        /// <summary>
        /// Number of times the vehicle did not finish the race
        /// </summary>
        /// <value>Number of times the vehicle did not finish the race</value>
        [DataMember(Name="dnf", EmitDefaultValue=false)]
        public int? Dnf { get; set; }

        /// <summary>
        /// Whether or not the owner made the playoffs
        /// </summary>
        /// <value>Whether or not the owner made the playoffs</value>
        [DataMember(Name="made_playoffs", EmitDefaultValue=false)]
        public bool? MadePlayoffs { get; set; }

        /// <summary>
        /// Whether or not the owner is still in the playoffs
        /// </summary>
        /// <value>Whether or not the owner is still in the playoffs</value>
        [DataMember(Name="in_playoffs", EmitDefaultValue=false)]
        public bool? InPlayoffs { get; set; }

        /// <summary>
        /// Highest playoff round earned
        /// </summary>
        /// <value>Highest playoff round earned</value>
        [DataMember(Name="highest_round", EmitDefaultValue=false)]
        public int? HighestRound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OwnerPoint {\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  VehicleNumber: ").Append(VehicleNumber).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  PlayoffPoints: ").Append(PlayoffPoints).Append("\n");
            sb.Append("  PlayoffRank: ").Append(PlayoffRank).Append("\n");
            sb.Append("  DeltaLeader: ").Append(DeltaLeader).Append("\n");
            sb.Append("  DeltaNext: ").Append(DeltaNext).Append("\n");
            sb.Append("  Starts: ").Append(Starts).Append("\n");
            sb.Append("  Poles: ").Append(Poles).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  Stage1Wins: ").Append(Stage1Wins).Append("\n");
            sb.Append("  Stage2Wins: ").Append(Stage2Wins).Append("\n");
            sb.Append("  Stage3Wins: ").Append(Stage3Wins).Append("\n");
            sb.Append("  StagePoints: ").Append(StagePoints).Append("\n");
            sb.Append("  PlayoffRaceWins: ").Append(PlayoffRaceWins).Append("\n");
            sb.Append("  PlayoffStageWins: ").Append(PlayoffStageWins).Append("\n");
            sb.Append("  PointsEarnedThisRace: ").Append(PointsEarnedThisRace).Append("\n");
            sb.Append("  PlayoffPointsEarnedThisRace: ").Append(PlayoffPointsEarnedThisRace).Append("\n");
            sb.Append("  StagePointsEarnedThisRace: ").Append(StagePointsEarnedThisRace).Append("\n");
            sb.Append("  Top5: ").Append(Top5).Append("\n");
            sb.Append("  Top10: ").Append(Top10).Append("\n");
            sb.Append("  LapsLed: ").Append(LapsLed).Append("\n");
            sb.Append("  Dnf: ").Append(Dnf).Append("\n");
            sb.Append("  MadePlayoffs: ").Append(MadePlayoffs).Append("\n");
            sb.Append("  InPlayoffs: ").Append(InPlayoffs).Append("\n");
            sb.Append("  HighestRound: ").Append(HighestRound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OwnerPoint);
        }

        /// <summary>
        /// Returns true if OwnerPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of OwnerPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OwnerPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.VehicleNumber == input.VehicleNumber ||
                    (this.VehicleNumber != null &&
                    this.VehicleNumber.Equals(input.VehicleNumber))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.PlayoffPoints == input.PlayoffPoints ||
                    (this.PlayoffPoints != null &&
                    this.PlayoffPoints.Equals(input.PlayoffPoints))
                ) && 
                (
                    this.PlayoffRank == input.PlayoffRank ||
                    (this.PlayoffRank != null &&
                    this.PlayoffRank.Equals(input.PlayoffRank))
                ) && 
                (
                    this.DeltaLeader == input.DeltaLeader ||
                    (this.DeltaLeader != null &&
                    this.DeltaLeader.Equals(input.DeltaLeader))
                ) && 
                (
                    this.DeltaNext == input.DeltaNext ||
                    (this.DeltaNext != null &&
                    this.DeltaNext.Equals(input.DeltaNext))
                ) && 
                (
                    this.Starts == input.Starts ||
                    (this.Starts != null &&
                    this.Starts.Equals(input.Starts))
                ) && 
                (
                    this.Poles == input.Poles ||
                    (this.Poles != null &&
                    this.Poles.Equals(input.Poles))
                ) && 
                (
                    this.Wins == input.Wins ||
                    (this.Wins != null &&
                    this.Wins.Equals(input.Wins))
                ) && 
                (
                    this.Stage1Wins == input.Stage1Wins ||
                    (this.Stage1Wins != null &&
                    this.Stage1Wins.Equals(input.Stage1Wins))
                ) && 
                (
                    this.Stage2Wins == input.Stage2Wins ||
                    (this.Stage2Wins != null &&
                    this.Stage2Wins.Equals(input.Stage2Wins))
                ) && 
                (
                    this.Stage3Wins == input.Stage3Wins ||
                    (this.Stage3Wins != null &&
                    this.Stage3Wins.Equals(input.Stage3Wins))
                ) && 
                (
                    this.StagePoints == input.StagePoints ||
                    (this.StagePoints != null &&
                    this.StagePoints.Equals(input.StagePoints))
                ) && 
                (
                    this.PlayoffRaceWins == input.PlayoffRaceWins ||
                    (this.PlayoffRaceWins != null &&
                    this.PlayoffRaceWins.Equals(input.PlayoffRaceWins))
                ) && 
                (
                    this.PlayoffStageWins == input.PlayoffStageWins ||
                    (this.PlayoffStageWins != null &&
                    this.PlayoffStageWins.Equals(input.PlayoffStageWins))
                ) && 
                (
                    this.PointsEarnedThisRace == input.PointsEarnedThisRace ||
                    (this.PointsEarnedThisRace != null &&
                    this.PointsEarnedThisRace.Equals(input.PointsEarnedThisRace))
                ) && 
                (
                    this.PlayoffPointsEarnedThisRace == input.PlayoffPointsEarnedThisRace ||
                    (this.PlayoffPointsEarnedThisRace != null &&
                    this.PlayoffPointsEarnedThisRace.Equals(input.PlayoffPointsEarnedThisRace))
                ) && 
                (
                    this.StagePointsEarnedThisRace == input.StagePointsEarnedThisRace ||
                    (this.StagePointsEarnedThisRace != null &&
                    this.StagePointsEarnedThisRace.Equals(input.StagePointsEarnedThisRace))
                ) && 
                (
                    this.Top5 == input.Top5 ||
                    (this.Top5 != null &&
                    this.Top5.Equals(input.Top5))
                ) && 
                (
                    this.Top10 == input.Top10 ||
                    (this.Top10 != null &&
                    this.Top10.Equals(input.Top10))
                ) && 
                (
                    this.LapsLed == input.LapsLed ||
                    (this.LapsLed != null &&
                    this.LapsLed.Equals(input.LapsLed))
                ) && 
                (
                    this.Dnf == input.Dnf ||
                    (this.Dnf != null &&
                    this.Dnf.Equals(input.Dnf))
                ) && 
                (
                    this.MadePlayoffs == input.MadePlayoffs ||
                    (this.MadePlayoffs != null &&
                    this.MadePlayoffs.Equals(input.MadePlayoffs))
                ) && 
                (
                    this.InPlayoffs == input.InPlayoffs ||
                    (this.InPlayoffs != null &&
                    this.InPlayoffs.Equals(input.InPlayoffs))
                ) && 
                (
                    this.HighestRound == input.HighestRound ||
                    (this.HighestRound != null &&
                    this.HighestRound.Equals(input.HighestRound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.VehicleNumber != null)
                    hashCode = hashCode * 59 + this.VehicleNumber.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.PlayoffPoints != null)
                    hashCode = hashCode * 59 + this.PlayoffPoints.GetHashCode();
                if (this.PlayoffRank != null)
                    hashCode = hashCode * 59 + this.PlayoffRank.GetHashCode();
                if (this.DeltaLeader != null)
                    hashCode = hashCode * 59 + this.DeltaLeader.GetHashCode();
                if (this.DeltaNext != null)
                    hashCode = hashCode * 59 + this.DeltaNext.GetHashCode();
                if (this.Starts != null)
                    hashCode = hashCode * 59 + this.Starts.GetHashCode();
                if (this.Poles != null)
                    hashCode = hashCode * 59 + this.Poles.GetHashCode();
                if (this.Wins != null)
                    hashCode = hashCode * 59 + this.Wins.GetHashCode();
                if (this.Stage1Wins != null)
                    hashCode = hashCode * 59 + this.Stage1Wins.GetHashCode();
                if (this.Stage2Wins != null)
                    hashCode = hashCode * 59 + this.Stage2Wins.GetHashCode();
                if (this.Stage3Wins != null)
                    hashCode = hashCode * 59 + this.Stage3Wins.GetHashCode();
                if (this.StagePoints != null)
                    hashCode = hashCode * 59 + this.StagePoints.GetHashCode();
                if (this.PlayoffRaceWins != null)
                    hashCode = hashCode * 59 + this.PlayoffRaceWins.GetHashCode();
                if (this.PlayoffStageWins != null)
                    hashCode = hashCode * 59 + this.PlayoffStageWins.GetHashCode();
                if (this.PointsEarnedThisRace != null)
                    hashCode = hashCode * 59 + this.PointsEarnedThisRace.GetHashCode();
                if (this.PlayoffPointsEarnedThisRace != null)
                    hashCode = hashCode * 59 + this.PlayoffPointsEarnedThisRace.GetHashCode();
                if (this.StagePointsEarnedThisRace != null)
                    hashCode = hashCode * 59 + this.StagePointsEarnedThisRace.GetHashCode();
                if (this.Top5 != null)
                    hashCode = hashCode * 59 + this.Top5.GetHashCode();
                if (this.Top10 != null)
                    hashCode = hashCode * 59 + this.Top10.GetHashCode();
                if (this.LapsLed != null)
                    hashCode = hashCode * 59 + this.LapsLed.GetHashCode();
                if (this.Dnf != null)
                    hashCode = hashCode * 59 + this.Dnf.GetHashCode();
                if (this.MadePlayoffs != null)
                    hashCode = hashCode * 59 + this.MadePlayoffs.GetHashCode();
                if (this.InPlayoffs != null)
                    hashCode = hashCode * 59 + this.InPlayoffs.GetHashCode();
                if (this.HighestRound != null)
                    hashCode = hashCode * 59 + this.HighestRound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
