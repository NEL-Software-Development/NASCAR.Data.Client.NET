/* 
 * NASCAR.Data.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using NASCAR.Data.Client.Client;
using NASCAR.Data.Client.Model;

namespace NASCAR.Data.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IRaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;Caution&gt;</returns>
        Collection<Caution> Cautions (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;Caution&gt;</returns>
        ApiResponse<Collection<Caution>> CautionsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;DisciplineUpdate&gt;</returns>
        Collection<DisciplineUpdate> DisciplineUpdates (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;DisciplineUpdate&gt;</returns>
        ApiResponse<Collection<DisciplineUpdate>> DisciplineUpdatesWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;RunEntry&gt;</returns>
        Collection<RunEntry> Entries (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;RunEntry&gt;</returns>
        ApiResponse<Collection<RunEntry>> EntriesWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;RaceInfraction&gt;</returns>
        Collection<RaceInfraction> Infractions (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;RaceInfraction&gt;</returns>
        ApiResponse<Collection<RaceInfraction>> InfractionsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;LapLeader&gt;</returns>
        Collection<LapLeader> LapLeaders (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;LapLeader&gt;</returns>
        ApiResponse<Collection<LapLeader>> LapLeadersWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;LoopStat&gt;</returns>
        Collection<LoopStat> LoopStats (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;LoopStat&gt;</returns>
        ApiResponse<Collection<LoopStat>> LoopStatsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;Pitstop&gt;</returns>
        Collection<Pitstop> PitStops (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;Pitstop&gt;</returns>
        ApiResponse<Collection<Pitstop>> PitStopsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;PracticeRunResults&gt;</returns>
        Collection<PracticeRunResults> PracticeResults (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;PracticeRunResults&gt;</returns>
        ApiResponse<Collection<PracticeRunResults>> PracticeResultsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;QualifyingRunResults&gt;</returns>
        Collection<QualifyingRunResults> QualifyingResults (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;QualifyingRunResults&gt;</returns>
        ApiResponse<Collection<QualifyingRunResults>> QualifyingResultsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>RaceDetails</returns>
        RaceDetails Race (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of RaceDetails</returns>
        ApiResponse<RaceDetails> RaceWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;RaceRunResults&gt;</returns>
        Collection<RaceRunResults> RaceResults (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;RaceRunResults&gt;</returns>
        ApiResponse<Collection<RaceRunResults>> RaceResultsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>Collection&lt;Collection&lt;Race&gt;&gt;</returns>
        Collection<Collection<Race>> RaceSeason (int? season = null, int? seriesId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;Collection&lt;Race&gt;&gt;</returns>
        ApiResponse<Collection<Collection<Race>>> RaceSeasonWithHttpInfo (int? season = null, int? seriesId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;TeamRoster&gt;</returns>
        Collection<TeamRoster> Rosters (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;TeamRoster&gt;</returns>
        ApiResponse<Collection<TeamRoster>> RostersWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;StageRunResults&gt;</returns>
        Collection<StageRunResults> StageResults (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;StageRunResults&gt;</returns>
        ApiResponse<Collection<StageRunResults>> StageResultsWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>RaceViewModel</returns>
        RaceViewModel ViewModel (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of RaceViewModel</returns>
        ApiResponse<RaceViewModel> ViewModelWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;WeekendSchedule&gt;</returns>
        Collection<WeekendSchedule> WeekendSchedule (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;WeekendSchedule&gt;</returns>
        ApiResponse<Collection<WeekendSchedule>> WeekendScheduleWithHttpInfo (int? raceId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;Caution&gt;</returns>
        System.Threading.Tasks.Task<Collection<Caution>> CautionsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;Caution&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<Caution>>> CautionsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;DisciplineUpdate&gt;</returns>
        System.Threading.Tasks.Task<Collection<DisciplineUpdate>> DisciplineUpdatesAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;DisciplineUpdate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<DisciplineUpdate>>> DisciplineUpdatesAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;RunEntry&gt;</returns>
        System.Threading.Tasks.Task<Collection<RunEntry>> EntriesAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;RunEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<RunEntry>>> EntriesAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;RaceInfraction&gt;</returns>
        System.Threading.Tasks.Task<Collection<RaceInfraction>> InfractionsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;RaceInfraction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<RaceInfraction>>> InfractionsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;LapLeader&gt;</returns>
        System.Threading.Tasks.Task<Collection<LapLeader>> LapLeadersAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;LapLeader&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<LapLeader>>> LapLeadersAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;LoopStat&gt;</returns>
        System.Threading.Tasks.Task<Collection<LoopStat>> LoopStatsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;LoopStat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<LoopStat>>> LoopStatsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;Pitstop&gt;</returns>
        System.Threading.Tasks.Task<Collection<Pitstop>> PitStopsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;Pitstop&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<Pitstop>>> PitStopsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;PracticeRunResults&gt;</returns>
        System.Threading.Tasks.Task<Collection<PracticeRunResults>> PracticeResultsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;PracticeRunResults&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<PracticeRunResults>>> PracticeResultsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;QualifyingRunResults&gt;</returns>
        System.Threading.Tasks.Task<Collection<QualifyingRunResults>> QualifyingResultsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;QualifyingRunResults&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<QualifyingRunResults>>> QualifyingResultsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of RaceDetails</returns>
        System.Threading.Tasks.Task<RaceDetails> RaceAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (RaceDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<RaceDetails>> RaceAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;RaceRunResults&gt;</returns>
        System.Threading.Tasks.Task<Collection<RaceRunResults>> RaceResultsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;RaceRunResults&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<RaceRunResults>>> RaceResultsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>Task of Collection&lt;Collection&lt;Race&gt;&gt;</returns>
        System.Threading.Tasks.Task<Collection<Collection<Race>>> RaceSeasonAsync (int? season = null, int? seriesId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;Collection&lt;Race&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<Collection<Race>>>> RaceSeasonAsyncWithHttpInfo (int? season = null, int? seriesId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;TeamRoster&gt;</returns>
        System.Threading.Tasks.Task<Collection<TeamRoster>> RostersAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;TeamRoster&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<TeamRoster>>> RostersAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;StageRunResults&gt;</returns>
        System.Threading.Tasks.Task<Collection<StageRunResults>> StageResultsAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;StageRunResults&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<StageRunResults>>> StageResultsAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of RaceViewModel</returns>
        System.Threading.Tasks.Task<RaceViewModel> ViewModelAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (RaceViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RaceViewModel>> ViewModelAsyncWithHttpInfo (int? raceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;WeekendSchedule&gt;</returns>
        System.Threading.Tasks.Task<Collection<WeekendSchedule>> WeekendScheduleAsync (int? raceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;WeekendSchedule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection<WeekendSchedule>>> WeekendScheduleAsyncWithHttpInfo (int? raceId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class RaceApi : IRaceApi
    {
        private NASCAR.Data.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RaceApi(String basePath)
        {
            this.Configuration = new NASCAR.Data.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = NASCAR.Data.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RaceApi"/> class
        /// </summary>
        /// <returns></returns>
        public RaceApi()
        {
            this.Configuration = NASCAR.Data.Client.Client.Configuration.Default;

            ExceptionFactory = NASCAR.Data.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RaceApi(NASCAR.Data.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = NASCAR.Data.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = NASCAR.Data.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public NASCAR.Data.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public NASCAR.Data.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;Caution&gt;</returns>
        public Collection<Caution> Cautions (int? raceId = null)
        {
             ApiResponse<Collection<Caution>> localVarResponse = CautionsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;Caution&gt;</returns>
        public ApiResponse< Collection<Caution> > CautionsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/cautions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cautions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<Caution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<Caution>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<Caution>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;Caution&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<Caution>> CautionsAsync (int? raceId = null)
        {
             ApiResponse<Collection<Caution>> localVarResponse = await CautionsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;Caution&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<Caution>>> CautionsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/cautions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cautions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<Caution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<Caution>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<Caution>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;DisciplineUpdate&gt;</returns>
        public Collection<DisciplineUpdate> DisciplineUpdates (int? raceId = null)
        {
             ApiResponse<Collection<DisciplineUpdate>> localVarResponse = DisciplineUpdatesWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;DisciplineUpdate&gt;</returns>
        public ApiResponse< Collection<DisciplineUpdate> > DisciplineUpdatesWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/discipline-updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisciplineUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<DisciplineUpdate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<DisciplineUpdate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<DisciplineUpdate>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;DisciplineUpdate&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<DisciplineUpdate>> DisciplineUpdatesAsync (int? raceId = null)
        {
             ApiResponse<Collection<DisciplineUpdate>> localVarResponse = await DisciplineUpdatesAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;DisciplineUpdate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<DisciplineUpdate>>> DisciplineUpdatesAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/discipline-updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisciplineUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<DisciplineUpdate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<DisciplineUpdate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<DisciplineUpdate>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;RunEntry&gt;</returns>
        public Collection<RunEntry> Entries (int? raceId = null)
        {
             ApiResponse<Collection<RunEntry>> localVarResponse = EntriesWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;RunEntry&gt;</returns>
        public ApiResponse< Collection<RunEntry> > EntriesWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Entries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<RunEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<RunEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<RunEntry>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;RunEntry&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<RunEntry>> EntriesAsync (int? raceId = null)
        {
             ApiResponse<Collection<RunEntry>> localVarResponse = await EntriesAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;RunEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<RunEntry>>> EntriesAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Entries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<RunEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<RunEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<RunEntry>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;RaceInfraction&gt;</returns>
        public Collection<RaceInfraction> Infractions (int? raceId = null)
        {
             ApiResponse<Collection<RaceInfraction>> localVarResponse = InfractionsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;RaceInfraction&gt;</returns>
        public ApiResponse< Collection<RaceInfraction> > InfractionsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/infractions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Infractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<RaceInfraction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<RaceInfraction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<RaceInfraction>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;RaceInfraction&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<RaceInfraction>> InfractionsAsync (int? raceId = null)
        {
             ApiResponse<Collection<RaceInfraction>> localVarResponse = await InfractionsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;RaceInfraction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<RaceInfraction>>> InfractionsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/infractions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Infractions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<RaceInfraction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<RaceInfraction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<RaceInfraction>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;LapLeader&gt;</returns>
        public Collection<LapLeader> LapLeaders (int? raceId = null)
        {
             ApiResponse<Collection<LapLeader>> localVarResponse = LapLeadersWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;LapLeader&gt;</returns>
        public ApiResponse< Collection<LapLeader> > LapLeadersWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/lap-leaders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LapLeaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<LapLeader>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<LapLeader>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<LapLeader>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;LapLeader&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<LapLeader>> LapLeadersAsync (int? raceId = null)
        {
             ApiResponse<Collection<LapLeader>> localVarResponse = await LapLeadersAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;LapLeader&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<LapLeader>>> LapLeadersAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/lap-leaders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LapLeaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<LapLeader>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<LapLeader>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<LapLeader>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;LoopStat&gt;</returns>
        public Collection<LoopStat> LoopStats (int? raceId = null)
        {
             ApiResponse<Collection<LoopStat>> localVarResponse = LoopStatsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;LoopStat&gt;</returns>
        public ApiResponse< Collection<LoopStat> > LoopStatsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/loop-stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoopStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<LoopStat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<LoopStat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<LoopStat>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;LoopStat&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<LoopStat>> LoopStatsAsync (int? raceId = null)
        {
             ApiResponse<Collection<LoopStat>> localVarResponse = await LoopStatsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;LoopStat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<LoopStat>>> LoopStatsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/loop-stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoopStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<LoopStat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<LoopStat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<LoopStat>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;Pitstop&gt;</returns>
        public Collection<Pitstop> PitStops (int? raceId = null)
        {
             ApiResponse<Collection<Pitstop>> localVarResponse = PitStopsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;Pitstop&gt;</returns>
        public ApiResponse< Collection<Pitstop> > PitStopsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/pitstops";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PitStops", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<Pitstop>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<Pitstop>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<Pitstop>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;Pitstop&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<Pitstop>> PitStopsAsync (int? raceId = null)
        {
             ApiResponse<Collection<Pitstop>> localVarResponse = await PitStopsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;Pitstop&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<Pitstop>>> PitStopsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/pitstops";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PitStops", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<Pitstop>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<Pitstop>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<Pitstop>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;PracticeRunResults&gt;</returns>
        public Collection<PracticeRunResults> PracticeResults (int? raceId = null)
        {
             ApiResponse<Collection<PracticeRunResults>> localVarResponse = PracticeResultsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;PracticeRunResults&gt;</returns>
        public ApiResponse< Collection<PracticeRunResults> > PracticeResultsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/practice-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PracticeResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<PracticeRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<PracticeRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<PracticeRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;PracticeRunResults&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<PracticeRunResults>> PracticeResultsAsync (int? raceId = null)
        {
             ApiResponse<Collection<PracticeRunResults>> localVarResponse = await PracticeResultsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;PracticeRunResults&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<PracticeRunResults>>> PracticeResultsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/practice-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PracticeResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<PracticeRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<PracticeRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<PracticeRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;QualifyingRunResults&gt;</returns>
        public Collection<QualifyingRunResults> QualifyingResults (int? raceId = null)
        {
             ApiResponse<Collection<QualifyingRunResults>> localVarResponse = QualifyingResultsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;QualifyingRunResults&gt;</returns>
        public ApiResponse< Collection<QualifyingRunResults> > QualifyingResultsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/qualifying-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QualifyingResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<QualifyingRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<QualifyingRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<QualifyingRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;QualifyingRunResults&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<QualifyingRunResults>> QualifyingResultsAsync (int? raceId = null)
        {
             ApiResponse<Collection<QualifyingRunResults>> localVarResponse = await QualifyingResultsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;QualifyingRunResults&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<QualifyingRunResults>>> QualifyingResultsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/qualifying-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QualifyingResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<QualifyingRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<QualifyingRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<QualifyingRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>RaceDetails</returns>
        public RaceDetails Race (int? raceId = null)
        {
             ApiResponse<RaceDetails> localVarResponse = RaceWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of RaceDetails</returns>
        public ApiResponse< RaceDetails > RaceWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Race", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RaceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RaceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RaceDetails)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of RaceDetails</returns>
        public async System.Threading.Tasks.Task<RaceDetails> RaceAsync (int? raceId = null)
        {
             ApiResponse<RaceDetails> localVarResponse = await RaceAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (RaceDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RaceDetails>> RaceAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Race", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RaceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RaceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RaceDetails)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;RaceRunResults&gt;</returns>
        public Collection<RaceRunResults> RaceResults (int? raceId = null)
        {
             ApiResponse<Collection<RaceRunResults>> localVarResponse = RaceResultsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;RaceRunResults&gt;</returns>
        public ApiResponse< Collection<RaceRunResults> > RaceResultsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/race-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RaceResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<RaceRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<RaceRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<RaceRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;RaceRunResults&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<RaceRunResults>> RaceResultsAsync (int? raceId = null)
        {
             ApiResponse<Collection<RaceRunResults>> localVarResponse = await RaceResultsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;RaceRunResults&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<RaceRunResults>>> RaceResultsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/race-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RaceResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<RaceRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<RaceRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<RaceRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>Collection&lt;Collection&lt;Race&gt;&gt;</returns>
        public Collection<Collection<Race>> RaceSeason (int? season = null, int? seriesId = null)
        {
             ApiResponse<Collection<Collection<Race>>> localVarResponse = RaceSeasonWithHttpInfo(season, seriesId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;Collection&lt;Race&gt;&gt;</returns>
        public ApiResponse< Collection<Collection<Race>> > RaceSeasonWithHttpInfo (int? season = null, int? seriesId = null)
        {

            var localVarPath = "/race/season";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (season != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "season", season)); // query parameter
            if (seriesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "series_id", seriesId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RaceSeason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<Collection<Race>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<Collection<Race>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<Collection<Race>>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>Task of Collection&lt;Collection&lt;Race&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<Collection<Race>>> RaceSeasonAsync (int? season = null, int? seriesId = null)
        {
             ApiResponse<Collection<Collection<Race>>> localVarResponse = await RaceSeasonAsyncWithHttpInfo(season, seriesId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="season"> (optional)</param>
        /// <param name="seriesId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;Collection&lt;Race&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<Collection<Race>>>> RaceSeasonAsyncWithHttpInfo (int? season = null, int? seriesId = null)
        {

            var localVarPath = "/race/season";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (season != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "season", season)); // query parameter
            if (seriesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "series_id", seriesId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RaceSeason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<Collection<Race>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<Collection<Race>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<Collection<Race>>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;TeamRoster&gt;</returns>
        public Collection<TeamRoster> Rosters (int? raceId = null)
        {
             ApiResponse<Collection<TeamRoster>> localVarResponse = RostersWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;TeamRoster&gt;</returns>
        public ApiResponse< Collection<TeamRoster> > RostersWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/rosters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rosters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<TeamRoster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<TeamRoster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<TeamRoster>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;TeamRoster&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<TeamRoster>> RostersAsync (int? raceId = null)
        {
             ApiResponse<Collection<TeamRoster>> localVarResponse = await RostersAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;TeamRoster&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<TeamRoster>>> RostersAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/rosters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rosters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<TeamRoster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<TeamRoster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<TeamRoster>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;StageRunResults&gt;</returns>
        public Collection<StageRunResults> StageResults (int? raceId = null)
        {
             ApiResponse<Collection<StageRunResults>> localVarResponse = StageResultsWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;StageRunResults&gt;</returns>
        public ApiResponse< Collection<StageRunResults> > StageResultsWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/stage-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StageResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<StageRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<StageRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<StageRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;StageRunResults&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<StageRunResults>> StageResultsAsync (int? raceId = null)
        {
             ApiResponse<Collection<StageRunResults>> localVarResponse = await StageResultsAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;StageRunResults&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<StageRunResults>>> StageResultsAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/stage-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StageResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<StageRunResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<StageRunResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<StageRunResults>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>RaceViewModel</returns>
        public RaceViewModel ViewModel (int? raceId = null)
        {
             ApiResponse<RaceViewModel> localVarResponse = ViewModelWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of RaceViewModel</returns>
        public ApiResponse< RaceViewModel > ViewModelWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/viewmodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RaceViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RaceViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RaceViewModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of RaceViewModel</returns>
        public async System.Threading.Tasks.Task<RaceViewModel> ViewModelAsync (int? raceId = null)
        {
             ApiResponse<RaceViewModel> localVarResponse = await ViewModelAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (RaceViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RaceViewModel>> ViewModelAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/viewmodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RaceViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RaceViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RaceViewModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Collection&lt;WeekendSchedule&gt;</returns>
        public Collection<WeekendSchedule> WeekendSchedule (int? raceId = null)
        {
             ApiResponse<Collection<WeekendSchedule>> localVarResponse = WeekendScheduleWithHttpInfo(raceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>ApiResponse of Collection&lt;WeekendSchedule&gt;</returns>
        public ApiResponse< Collection<WeekendSchedule> > WeekendScheduleWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/weekend-schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WeekendSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<WeekendSchedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<WeekendSchedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<WeekendSchedule>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of Collection&lt;WeekendSchedule&gt;</returns>
        public async System.Threading.Tasks.Task<Collection<WeekendSchedule>> WeekendScheduleAsync (int? raceId = null)
        {
             ApiResponse<Collection<WeekendSchedule>> localVarResponse = await WeekendScheduleAsyncWithHttpInfo(raceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NASCAR.Data.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raceId"> (optional)</param>
        /// <returns>Task of ApiResponse (Collection&lt;WeekendSchedule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection<WeekendSchedule>>> WeekendScheduleAsyncWithHttpInfo (int? raceId = null)
        {

            var localVarPath = "/race/weekend-schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (raceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "race_id", raceId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WeekendSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection<WeekendSchedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection<WeekendSchedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection<WeekendSchedule>)));
        }

    }
}
